// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "graph.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5frouter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto;
namespace TCProto {
class BusEdgeInfo;
struct BusEdgeInfoDefaultTypeInternal;
extern BusEdgeInfoDefaultTypeInternal _BusEdgeInfo_default_instance_;
class CompanyEdgeInfo;
struct CompanyEdgeInfoDefaultTypeInternal;
extern CompanyEdgeInfoDefaultTypeInternal _CompanyEdgeInfo_default_instance_;
class CompanyVertexInfo;
struct CompanyVertexInfoDefaultTypeInternal;
extern CompanyVertexInfoDefaultTypeInternal _CompanyVertexInfo_default_instance_;
class EdgeInfo;
struct EdgeInfoDefaultTypeInternal;
extern EdgeInfoDefaultTypeInternal _EdgeInfo_default_instance_;
class RoutingSettings;
struct RoutingSettingsDefaultTypeInternal;
extern RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
class StopVertexIds;
struct StopVertexIdsDefaultTypeInternal;
extern StopVertexIdsDefaultTypeInternal _StopVertexIds_default_instance_;
class StopVertexInfo;
struct StopVertexInfoDefaultTypeInternal;
extern StopVertexInfoDefaultTypeInternal _StopVertexInfo_default_instance_;
class TransportRouter;
struct TransportRouterDefaultTypeInternal;
extern TransportRouterDefaultTypeInternal _TransportRouter_default_instance_;
class VertexInfo;
struct VertexInfoDefaultTypeInternal;
extern VertexInfoDefaultTypeInternal _VertexInfo_default_instance_;
class WaitEdgeInfo;
struct WaitEdgeInfoDefaultTypeInternal;
extern WaitEdgeInfoDefaultTypeInternal _WaitEdgeInfo_default_instance_;
}  // namespace TCProto
PROTOBUF_NAMESPACE_OPEN
template<> ::TCProto::BusEdgeInfo* Arena::CreateMaybeMessage<::TCProto::BusEdgeInfo>(Arena*);
template<> ::TCProto::CompanyEdgeInfo* Arena::CreateMaybeMessage<::TCProto::CompanyEdgeInfo>(Arena*);
template<> ::TCProto::CompanyVertexInfo* Arena::CreateMaybeMessage<::TCProto::CompanyVertexInfo>(Arena*);
template<> ::TCProto::EdgeInfo* Arena::CreateMaybeMessage<::TCProto::EdgeInfo>(Arena*);
template<> ::TCProto::RoutingSettings* Arena::CreateMaybeMessage<::TCProto::RoutingSettings>(Arena*);
template<> ::TCProto::StopVertexIds* Arena::CreateMaybeMessage<::TCProto::StopVertexIds>(Arena*);
template<> ::TCProto::StopVertexInfo* Arena::CreateMaybeMessage<::TCProto::StopVertexInfo>(Arena*);
template<> ::TCProto::TransportRouter* Arena::CreateMaybeMessage<::TCProto::TransportRouter>(Arena*);
template<> ::TCProto::VertexInfo* Arena::CreateMaybeMessage<::TCProto::VertexInfo>(Arena*);
template<> ::TCProto::WaitEdgeInfo* Arena::CreateMaybeMessage<::TCProto::WaitEdgeInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TCProto {

// ===================================================================

class RoutingSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.RoutingSettings) */ {
 public:
  inline RoutingSettings() : RoutingSettings(nullptr) {}
  ~RoutingSettings() override;
  explicit constexpr RoutingSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutingSettings(const RoutingSettings& from);
  RoutingSettings(RoutingSettings&& from) noexcept
    : RoutingSettings() {
    *this = ::std::move(from);
  }

  inline RoutingSettings& operator=(const RoutingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSettings& operator=(RoutingSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingSettings* internal_default_instance() {
    return reinterpret_cast<const RoutingSettings*>(
               &_RoutingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoutingSettings& a, RoutingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingSettings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingSettings* New() const final {
    return new RoutingSettings();
  }

  RoutingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutingSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoutingSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.RoutingSettings";
  }
  protected:
  explicit RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusVelocityFieldNumber = 2,
    kBusWaitTimeFieldNumber = 1,
  };
  // double bus_velocity = 2;
  void clear_bus_velocity();
  double bus_velocity() const;
  void set_bus_velocity(double value);
  private:
  double _internal_bus_velocity() const;
  void _internal_set_bus_velocity(double value);
  public:

  // int32 bus_wait_time = 1;
  void clear_bus_wait_time();
  ::PROTOBUF_NAMESPACE_ID::int32 bus_wait_time() const;
  void set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bus_wait_time() const;
  void _internal_set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TCProto.RoutingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double bus_velocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 bus_wait_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class StopVertexIds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.StopVertexIds) */ {
 public:
  inline StopVertexIds() : StopVertexIds(nullptr) {}
  ~StopVertexIds() override;
  explicit constexpr StopVertexIds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopVertexIds(const StopVertexIds& from);
  StopVertexIds(StopVertexIds&& from) noexcept
    : StopVertexIds() {
    *this = ::std::move(from);
  }

  inline StopVertexIds& operator=(const StopVertexIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVertexIds& operator=(StopVertexIds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopVertexIds& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopVertexIds* internal_default_instance() {
    return reinterpret_cast<const StopVertexIds*>(
               &_StopVertexIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StopVertexIds& a, StopVertexIds& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVertexIds* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVertexIds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopVertexIds* New() const final {
    return new StopVertexIds();
  }

  StopVertexIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopVertexIds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopVertexIds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopVertexIds& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVertexIds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.StopVertexIds";
  }
  protected:
  explicit StopVertexIds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kInFieldNumber = 2,
    kOutFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 in = 2;
  void clear_in();
  ::PROTOBUF_NAMESPACE_ID::uint32 in() const;
  void set_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in() const;
  void _internal_set_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 out = 3;
  void clear_out();
  ::PROTOBUF_NAMESPACE_ID::uint32 out() const;
  void set_out(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_out() const;
  void _internal_set_out(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TCProto.StopVertexIds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 in_;
  ::PROTOBUF_NAMESPACE_ID::uint32 out_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class StopVertexInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.StopVertexInfo) */ {
 public:
  inline StopVertexInfo() : StopVertexInfo(nullptr) {}
  ~StopVertexInfo() override;
  explicit constexpr StopVertexInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopVertexInfo(const StopVertexInfo& from);
  StopVertexInfo(StopVertexInfo&& from) noexcept
    : StopVertexInfo() {
    *this = ::std::move(from);
  }

  inline StopVertexInfo& operator=(const StopVertexInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVertexInfo& operator=(StopVertexInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopVertexInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopVertexInfo* internal_default_instance() {
    return reinterpret_cast<const StopVertexInfo*>(
               &_StopVertexInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StopVertexInfo& a, StopVertexInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVertexInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVertexInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopVertexInfo* New() const final {
    return new StopVertexInfo();
  }

  StopVertexInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopVertexInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopVertexInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopVertexInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVertexInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.StopVertexInfo";
  }
  protected:
  explicit StopVertexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopNameFieldNumber = 1,
  };
  // string stop_name = 1;
  void clear_stop_name();
  const std::string& stop_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stop_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stop_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_stop_name();
  void set_allocated_stop_name(std::string* stop_name);
  private:
  const std::string& _internal_stop_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_name(const std::string& value);
  std::string* _internal_mutable_stop_name();
  public:

  // @@protoc_insertion_point(class_scope:TCProto.StopVertexInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class CompanyVertexInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.CompanyVertexInfo) */ {
 public:
  inline CompanyVertexInfo() : CompanyVertexInfo(nullptr) {}
  ~CompanyVertexInfo() override;
  explicit constexpr CompanyVertexInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompanyVertexInfo(const CompanyVertexInfo& from);
  CompanyVertexInfo(CompanyVertexInfo&& from) noexcept
    : CompanyVertexInfo() {
    *this = ::std::move(from);
  }

  inline CompanyVertexInfo& operator=(const CompanyVertexInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompanyVertexInfo& operator=(CompanyVertexInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompanyVertexInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompanyVertexInfo* internal_default_instance() {
    return reinterpret_cast<const CompanyVertexInfo*>(
               &_CompanyVertexInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CompanyVertexInfo& a, CompanyVertexInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CompanyVertexInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompanyVertexInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompanyVertexInfo* New() const final {
    return new CompanyVertexInfo();
  }

  CompanyVertexInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompanyVertexInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompanyVertexInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CompanyVertexInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompanyVertexInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.CompanyVertexInfo";
  }
  protected:
  explicit CompanyVertexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompanyIdFieldNumber = 1,
  };
  // uint32 company_id = 1;
  void clear_company_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 company_id() const;
  void set_company_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_company_id() const;
  void _internal_set_company_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TCProto.CompanyVertexInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 company_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class VertexInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.VertexInfo) */ {
 public:
  inline VertexInfo() : VertexInfo(nullptr) {}
  ~VertexInfo() override;
  explicit constexpr VertexInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VertexInfo(const VertexInfo& from);
  VertexInfo(VertexInfo&& from) noexcept
    : VertexInfo() {
    *this = ::std::move(from);
  }

  inline VertexInfo& operator=(const VertexInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexInfo& operator=(VertexInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VertexInfo& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kStopData = 1,
    kCompanyData = 2,
    DATA_NOT_SET = 0,
  };

  static inline const VertexInfo* internal_default_instance() {
    return reinterpret_cast<const VertexInfo*>(
               &_VertexInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VertexInfo& a, VertexInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VertexInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VertexInfo* New() const final {
    return new VertexInfo();
  }

  VertexInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VertexInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VertexInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VertexInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.VertexInfo";
  }
  protected:
  explicit VertexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopDataFieldNumber = 1,
    kCompanyDataFieldNumber = 2,
  };
  // .TCProto.StopVertexInfo stop_data = 1;
  bool has_stop_data() const;
  private:
  bool _internal_has_stop_data() const;
  public:
  void clear_stop_data();
  const ::TCProto::StopVertexInfo& stop_data() const;
  PROTOBUF_MUST_USE_RESULT ::TCProto::StopVertexInfo* release_stop_data();
  ::TCProto::StopVertexInfo* mutable_stop_data();
  void set_allocated_stop_data(::TCProto::StopVertexInfo* stop_data);
  private:
  const ::TCProto::StopVertexInfo& _internal_stop_data() const;
  ::TCProto::StopVertexInfo* _internal_mutable_stop_data();
  public:
  void unsafe_arena_set_allocated_stop_data(
      ::TCProto::StopVertexInfo* stop_data);
  ::TCProto::StopVertexInfo* unsafe_arena_release_stop_data();

  // .TCProto.CompanyVertexInfo company_data = 2;
  bool has_company_data() const;
  private:
  bool _internal_has_company_data() const;
  public:
  void clear_company_data();
  const ::TCProto::CompanyVertexInfo& company_data() const;
  PROTOBUF_MUST_USE_RESULT ::TCProto::CompanyVertexInfo* release_company_data();
  ::TCProto::CompanyVertexInfo* mutable_company_data();
  void set_allocated_company_data(::TCProto::CompanyVertexInfo* company_data);
  private:
  const ::TCProto::CompanyVertexInfo& _internal_company_data() const;
  ::TCProto::CompanyVertexInfo* _internal_mutable_company_data();
  public:
  void unsafe_arena_set_allocated_company_data(
      ::TCProto::CompanyVertexInfo* company_data);
  ::TCProto::CompanyVertexInfo* unsafe_arena_release_company_data();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:TCProto.VertexInfo)
 private:
  class _Internal;
  void set_has_stop_data();
  void set_has_company_data();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TCProto::StopVertexInfo* stop_data_;
    ::TCProto::CompanyVertexInfo* company_data_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class BusEdgeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.BusEdgeInfo) */ {
 public:
  inline BusEdgeInfo() : BusEdgeInfo(nullptr) {}
  ~BusEdgeInfo() override;
  explicit constexpr BusEdgeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusEdgeInfo(const BusEdgeInfo& from);
  BusEdgeInfo(BusEdgeInfo&& from) noexcept
    : BusEdgeInfo() {
    *this = ::std::move(from);
  }

  inline BusEdgeInfo& operator=(const BusEdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusEdgeInfo& operator=(BusEdgeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusEdgeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusEdgeInfo* internal_default_instance() {
    return reinterpret_cast<const BusEdgeInfo*>(
               &_BusEdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BusEdgeInfo& a, BusEdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BusEdgeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusEdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusEdgeInfo* New() const final {
    return new BusEdgeInfo();
  }

  BusEdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusEdgeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusEdgeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BusEdgeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusEdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.BusEdgeInfo";
  }
  protected:
  explicit BusEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusNameFieldNumber = 1,
    kStartStopIdxFieldNumber = 2,
    kFinishStopIdxFieldNumber = 3,
  };
  // string bus_name = 1;
  void clear_bus_name();
  const std::string& bus_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bus_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bus_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_bus_name();
  void set_allocated_bus_name(std::string* bus_name);
  private:
  const std::string& _internal_bus_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bus_name(const std::string& value);
  std::string* _internal_mutable_bus_name();
  public:

  // uint32 start_stop_idx = 2;
  void clear_start_stop_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_stop_idx() const;
  void set_start_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_stop_idx() const;
  void _internal_set_start_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 finish_stop_idx = 3;
  void clear_finish_stop_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 finish_stop_idx() const;
  void set_finish_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_finish_stop_idx() const;
  void _internal_set_finish_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TCProto.BusEdgeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bus_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_stop_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 finish_stop_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class WaitEdgeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.WaitEdgeInfo) */ {
 public:
  inline WaitEdgeInfo() : WaitEdgeInfo(nullptr) {}
  ~WaitEdgeInfo() override;
  explicit constexpr WaitEdgeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitEdgeInfo(const WaitEdgeInfo& from);
  WaitEdgeInfo(WaitEdgeInfo&& from) noexcept
    : WaitEdgeInfo() {
    *this = ::std::move(from);
  }

  inline WaitEdgeInfo& operator=(const WaitEdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitEdgeInfo& operator=(WaitEdgeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitEdgeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitEdgeInfo* internal_default_instance() {
    return reinterpret_cast<const WaitEdgeInfo*>(
               &_WaitEdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WaitEdgeInfo& a, WaitEdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitEdgeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitEdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaitEdgeInfo* New() const final {
    return new WaitEdgeInfo();
  }

  WaitEdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitEdgeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitEdgeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitEdgeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitEdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.WaitEdgeInfo";
  }
  protected:
  explicit WaitEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TCProto.WaitEdgeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class CompanyEdgeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.CompanyEdgeInfo) */ {
 public:
  inline CompanyEdgeInfo() : CompanyEdgeInfo(nullptr) {}
  ~CompanyEdgeInfo() override;
  explicit constexpr CompanyEdgeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompanyEdgeInfo(const CompanyEdgeInfo& from);
  CompanyEdgeInfo(CompanyEdgeInfo&& from) noexcept
    : CompanyEdgeInfo() {
    *this = ::std::move(from);
  }

  inline CompanyEdgeInfo& operator=(const CompanyEdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompanyEdgeInfo& operator=(CompanyEdgeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompanyEdgeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompanyEdgeInfo* internal_default_instance() {
    return reinterpret_cast<const CompanyEdgeInfo*>(
               &_CompanyEdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CompanyEdgeInfo& a, CompanyEdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CompanyEdgeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompanyEdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompanyEdgeInfo* New() const final {
    return new CompanyEdgeInfo();
  }

  CompanyEdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompanyEdgeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompanyEdgeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CompanyEdgeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompanyEdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.CompanyEdgeInfo";
  }
  protected:
  explicit CompanyEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopNameFieldNumber = 1,
    kCompanyIdFieldNumber = 2,
  };
  // string stop_name = 1;
  void clear_stop_name();
  const std::string& stop_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stop_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stop_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_stop_name();
  void set_allocated_stop_name(std::string* stop_name);
  private:
  const std::string& _internal_stop_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_name(const std::string& value);
  std::string* _internal_mutable_stop_name();
  public:

  // uint32 company_id = 2;
  void clear_company_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 company_id() const;
  void set_company_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_company_id() const;
  void _internal_set_company_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TCProto.CompanyEdgeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 company_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class EdgeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.EdgeInfo) */ {
 public:
  inline EdgeInfo() : EdgeInfo(nullptr) {}
  ~EdgeInfo() override;
  explicit constexpr EdgeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeInfo(const EdgeInfo& from);
  EdgeInfo(EdgeInfo&& from) noexcept
    : EdgeInfo() {
    *this = ::std::move(from);
  }

  inline EdgeInfo& operator=(const EdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeInfo& operator=(EdgeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeInfo& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kBusData = 1,
    kWaitData = 2,
    kCompanyData = 3,
    DATA_NOT_SET = 0,
  };

  static inline const EdgeInfo* internal_default_instance() {
    return reinterpret_cast<const EdgeInfo*>(
               &_EdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EdgeInfo& a, EdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgeInfo* New() const final {
    return new EdgeInfo();
  }

  EdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EdgeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.EdgeInfo";
  }
  protected:
  explicit EdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusDataFieldNumber = 1,
    kWaitDataFieldNumber = 2,
    kCompanyDataFieldNumber = 3,
  };
  // .TCProto.BusEdgeInfo bus_data = 1;
  bool has_bus_data() const;
  private:
  bool _internal_has_bus_data() const;
  public:
  void clear_bus_data();
  const ::TCProto::BusEdgeInfo& bus_data() const;
  PROTOBUF_MUST_USE_RESULT ::TCProto::BusEdgeInfo* release_bus_data();
  ::TCProto::BusEdgeInfo* mutable_bus_data();
  void set_allocated_bus_data(::TCProto::BusEdgeInfo* bus_data);
  private:
  const ::TCProto::BusEdgeInfo& _internal_bus_data() const;
  ::TCProto::BusEdgeInfo* _internal_mutable_bus_data();
  public:
  void unsafe_arena_set_allocated_bus_data(
      ::TCProto::BusEdgeInfo* bus_data);
  ::TCProto::BusEdgeInfo* unsafe_arena_release_bus_data();

  // .TCProto.WaitEdgeInfo wait_data = 2;
  bool has_wait_data() const;
  private:
  bool _internal_has_wait_data() const;
  public:
  void clear_wait_data();
  const ::TCProto::WaitEdgeInfo& wait_data() const;
  PROTOBUF_MUST_USE_RESULT ::TCProto::WaitEdgeInfo* release_wait_data();
  ::TCProto::WaitEdgeInfo* mutable_wait_data();
  void set_allocated_wait_data(::TCProto::WaitEdgeInfo* wait_data);
  private:
  const ::TCProto::WaitEdgeInfo& _internal_wait_data() const;
  ::TCProto::WaitEdgeInfo* _internal_mutable_wait_data();
  public:
  void unsafe_arena_set_allocated_wait_data(
      ::TCProto::WaitEdgeInfo* wait_data);
  ::TCProto::WaitEdgeInfo* unsafe_arena_release_wait_data();

  // .TCProto.CompanyEdgeInfo company_data = 3;
  bool has_company_data() const;
  private:
  bool _internal_has_company_data() const;
  public:
  void clear_company_data();
  const ::TCProto::CompanyEdgeInfo& company_data() const;
  PROTOBUF_MUST_USE_RESULT ::TCProto::CompanyEdgeInfo* release_company_data();
  ::TCProto::CompanyEdgeInfo* mutable_company_data();
  void set_allocated_company_data(::TCProto::CompanyEdgeInfo* company_data);
  private:
  const ::TCProto::CompanyEdgeInfo& _internal_company_data() const;
  ::TCProto::CompanyEdgeInfo* _internal_mutable_company_data();
  public:
  void unsafe_arena_set_allocated_company_data(
      ::TCProto::CompanyEdgeInfo* company_data);
  ::TCProto::CompanyEdgeInfo* unsafe_arena_release_company_data();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:TCProto.EdgeInfo)
 private:
  class _Internal;
  void set_has_bus_data();
  void set_has_wait_data();
  void set_has_company_data();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::TCProto::BusEdgeInfo* bus_data_;
    ::TCProto::WaitEdgeInfo* wait_data_;
    ::TCProto::CompanyEdgeInfo* company_data_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class TransportRouter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.TransportRouter) */ {
 public:
  inline TransportRouter() : TransportRouter(nullptr) {}
  ~TransportRouter() override;
  explicit constexpr TransportRouter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportRouter(const TransportRouter& from);
  TransportRouter(TransportRouter&& from) noexcept
    : TransportRouter() {
    *this = ::std::move(from);
  }

  inline TransportRouter& operator=(const TransportRouter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportRouter& operator=(TransportRouter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportRouter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportRouter* internal_default_instance() {
    return reinterpret_cast<const TransportRouter*>(
               &_TransportRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TransportRouter& a, TransportRouter& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportRouter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportRouter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportRouter* New() const final {
    return new TransportRouter();
  }

  TransportRouter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportRouter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportRouter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransportRouter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportRouter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.TransportRouter";
  }
  protected:
  explicit TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsVertexIdsFieldNumber = 4,
    kVerticesInfoFieldNumber = 5,
    kEdgesInfoFieldNumber = 6,
    kCompaniesVertexIdFieldNumber = 7,
    kRoutingSettingsFieldNumber = 1,
    kGraphFieldNumber = 2,
    kRouterFieldNumber = 3,
  };
  // repeated .TCProto.StopVertexIds stops_vertex_ids = 4;
  int stops_vertex_ids_size() const;
  private:
  int _internal_stops_vertex_ids_size() const;
  public:
  void clear_stops_vertex_ids();
  ::TCProto::StopVertexIds* mutable_stops_vertex_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::StopVertexIds >*
      mutable_stops_vertex_ids();
  private:
  const ::TCProto::StopVertexIds& _internal_stops_vertex_ids(int index) const;
  ::TCProto::StopVertexIds* _internal_add_stops_vertex_ids();
  public:
  const ::TCProto::StopVertexIds& stops_vertex_ids(int index) const;
  ::TCProto::StopVertexIds* add_stops_vertex_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::StopVertexIds >&
      stops_vertex_ids() const;

  // repeated .TCProto.VertexInfo vertices_info = 5;
  int vertices_info_size() const;
  private:
  int _internal_vertices_info_size() const;
  public:
  void clear_vertices_info();
  ::TCProto::VertexInfo* mutable_vertices_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::VertexInfo >*
      mutable_vertices_info();
  private:
  const ::TCProto::VertexInfo& _internal_vertices_info(int index) const;
  ::TCProto::VertexInfo* _internal_add_vertices_info();
  public:
  const ::TCProto::VertexInfo& vertices_info(int index) const;
  ::TCProto::VertexInfo* add_vertices_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::VertexInfo >&
      vertices_info() const;

  // repeated .TCProto.EdgeInfo edges_info = 6;
  int edges_info_size() const;
  private:
  int _internal_edges_info_size() const;
  public:
  void clear_edges_info();
  ::TCProto::EdgeInfo* mutable_edges_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::EdgeInfo >*
      mutable_edges_info();
  private:
  const ::TCProto::EdgeInfo& _internal_edges_info(int index) const;
  ::TCProto::EdgeInfo* _internal_add_edges_info();
  public:
  const ::TCProto::EdgeInfo& edges_info(int index) const;
  ::TCProto::EdgeInfo* add_edges_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::EdgeInfo >&
      edges_info() const;

  // repeated uint32 companies_vertex_id = 7;
  int companies_vertex_id_size() const;
  private:
  int _internal_companies_vertex_id_size() const;
  public:
  void clear_companies_vertex_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_companies_vertex_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_companies_vertex_id() const;
  void _internal_add_companies_vertex_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_companies_vertex_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 companies_vertex_id(int index) const;
  void set_companies_vertex_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_companies_vertex_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      companies_vertex_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_companies_vertex_id();

  // .TCProto.RoutingSettings routing_settings = 1;
  bool has_routing_settings() const;
  private:
  bool _internal_has_routing_settings() const;
  public:
  void clear_routing_settings();
  const ::TCProto::RoutingSettings& routing_settings() const;
  PROTOBUF_MUST_USE_RESULT ::TCProto::RoutingSettings* release_routing_settings();
  ::TCProto::RoutingSettings* mutable_routing_settings();
  void set_allocated_routing_settings(::TCProto::RoutingSettings* routing_settings);
  private:
  const ::TCProto::RoutingSettings& _internal_routing_settings() const;
  ::TCProto::RoutingSettings* _internal_mutable_routing_settings();
  public:
  void unsafe_arena_set_allocated_routing_settings(
      ::TCProto::RoutingSettings* routing_settings);
  ::TCProto::RoutingSettings* unsafe_arena_release_routing_settings();

  // .GraphProto.DirectedWeightedGraph graph = 2;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::GraphProto::DirectedWeightedGraph& graph() const;
  PROTOBUF_MUST_USE_RESULT ::GraphProto::DirectedWeightedGraph* release_graph();
  ::GraphProto::DirectedWeightedGraph* mutable_graph();
  void set_allocated_graph(::GraphProto::DirectedWeightedGraph* graph);
  private:
  const ::GraphProto::DirectedWeightedGraph& _internal_graph() const;
  ::GraphProto::DirectedWeightedGraph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::GraphProto::DirectedWeightedGraph* graph);
  ::GraphProto::DirectedWeightedGraph* unsafe_arena_release_graph();

  // .GraphProto.Router router = 3;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::GraphProto::Router& router() const;
  PROTOBUF_MUST_USE_RESULT ::GraphProto::Router* release_router();
  ::GraphProto::Router* mutable_router();
  void set_allocated_router(::GraphProto::Router* router);
  private:
  const ::GraphProto::Router& _internal_router() const;
  ::GraphProto::Router* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::GraphProto::Router* router);
  ::GraphProto::Router* unsafe_arena_release_router();

  // @@protoc_insertion_point(class_scope:TCProto.TransportRouter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::StopVertexIds > stops_vertex_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::VertexInfo > vertices_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::EdgeInfo > edges_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > companies_vertex_id_;
  mutable std::atomic<int> _companies_vertex_id_cached_byte_size_;
  ::TCProto::RoutingSettings* routing_settings_;
  ::GraphProto::DirectedWeightedGraph* graph_;
  ::GraphProto::Router* router_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoutingSettings

// int32 bus_wait_time = 1;
inline void RoutingSettings::clear_bus_wait_time() {
  bus_wait_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutingSettings::_internal_bus_wait_time() const {
  return bus_wait_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutingSettings::bus_wait_time() const {
  // @@protoc_insertion_point(field_get:TCProto.RoutingSettings.bus_wait_time)
  return _internal_bus_wait_time();
}
inline void RoutingSettings::_internal_set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bus_wait_time_ = value;
}
inline void RoutingSettings::set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bus_wait_time(value);
  // @@protoc_insertion_point(field_set:TCProto.RoutingSettings.bus_wait_time)
}

// double bus_velocity = 2;
inline void RoutingSettings::clear_bus_velocity() {
  bus_velocity_ = 0;
}
inline double RoutingSettings::_internal_bus_velocity() const {
  return bus_velocity_;
}
inline double RoutingSettings::bus_velocity() const {
  // @@protoc_insertion_point(field_get:TCProto.RoutingSettings.bus_velocity)
  return _internal_bus_velocity();
}
inline void RoutingSettings::_internal_set_bus_velocity(double value) {
  
  bus_velocity_ = value;
}
inline void RoutingSettings::set_bus_velocity(double value) {
  _internal_set_bus_velocity(value);
  // @@protoc_insertion_point(field_set:TCProto.RoutingSettings.bus_velocity)
}

// -------------------------------------------------------------------

// StopVertexIds

// string name = 1;
inline void StopVertexIds::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StopVertexIds::name() const {
  // @@protoc_insertion_point(field_get:TCProto.StopVertexIds.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopVertexIds::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TCProto.StopVertexIds.name)
}
inline std::string* StopVertexIds::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TCProto.StopVertexIds.name)
  return _s;
}
inline const std::string& StopVertexIds::_internal_name() const {
  return name_.Get();
}
inline void StopVertexIds::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StopVertexIds::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StopVertexIds::release_name() {
  // @@protoc_insertion_point(field_release:TCProto.StopVertexIds.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StopVertexIds::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TCProto.StopVertexIds.name)
}

// uint32 in = 2;
inline void StopVertexIds::clear_in() {
  in_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopVertexIds::_internal_in() const {
  return in_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopVertexIds::in() const {
  // @@protoc_insertion_point(field_get:TCProto.StopVertexIds.in)
  return _internal_in();
}
inline void StopVertexIds::_internal_set_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  in_ = value;
}
inline void StopVertexIds::set_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_in(value);
  // @@protoc_insertion_point(field_set:TCProto.StopVertexIds.in)
}

// uint32 out = 3;
inline void StopVertexIds::clear_out() {
  out_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopVertexIds::_internal_out() const {
  return out_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopVertexIds::out() const {
  // @@protoc_insertion_point(field_get:TCProto.StopVertexIds.out)
  return _internal_out();
}
inline void StopVertexIds::_internal_set_out(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  out_ = value;
}
inline void StopVertexIds::set_out(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_out(value);
  // @@protoc_insertion_point(field_set:TCProto.StopVertexIds.out)
}

// -------------------------------------------------------------------

// StopVertexInfo

// string stop_name = 1;
inline void StopVertexInfo::clear_stop_name() {
  stop_name_.ClearToEmpty();
}
inline const std::string& StopVertexInfo::stop_name() const {
  // @@protoc_insertion_point(field_get:TCProto.StopVertexInfo.stop_name)
  return _internal_stop_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopVertexInfo::set_stop_name(ArgT0&& arg0, ArgT... args) {
 
 stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TCProto.StopVertexInfo.stop_name)
}
inline std::string* StopVertexInfo::mutable_stop_name() {
  std::string* _s = _internal_mutable_stop_name();
  // @@protoc_insertion_point(field_mutable:TCProto.StopVertexInfo.stop_name)
  return _s;
}
inline const std::string& StopVertexInfo::_internal_stop_name() const {
  return stop_name_.Get();
}
inline void StopVertexInfo::_internal_set_stop_name(const std::string& value) {
  
  stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StopVertexInfo::_internal_mutable_stop_name() {
  
  return stop_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StopVertexInfo::release_stop_name() {
  // @@protoc_insertion_point(field_release:TCProto.StopVertexInfo.stop_name)
  return stop_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StopVertexInfo::set_allocated_stop_name(std::string* stop_name) {
  if (stop_name != nullptr) {
    
  } else {
    
  }
  stop_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stop_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TCProto.StopVertexInfo.stop_name)
}

// -------------------------------------------------------------------

// CompanyVertexInfo

// uint32 company_id = 1;
inline void CompanyVertexInfo::clear_company_id() {
  company_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompanyVertexInfo::_internal_company_id() const {
  return company_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompanyVertexInfo::company_id() const {
  // @@protoc_insertion_point(field_get:TCProto.CompanyVertexInfo.company_id)
  return _internal_company_id();
}
inline void CompanyVertexInfo::_internal_set_company_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  company_id_ = value;
}
inline void CompanyVertexInfo::set_company_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_company_id(value);
  // @@protoc_insertion_point(field_set:TCProto.CompanyVertexInfo.company_id)
}

// -------------------------------------------------------------------

// VertexInfo

// .TCProto.StopVertexInfo stop_data = 1;
inline bool VertexInfo::_internal_has_stop_data() const {
  return data_case() == kStopData;
}
inline bool VertexInfo::has_stop_data() const {
  return _internal_has_stop_data();
}
inline void VertexInfo::set_has_stop_data() {
  _oneof_case_[0] = kStopData;
}
inline void VertexInfo::clear_stop_data() {
  if (_internal_has_stop_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.stop_data_;
    }
    clear_has_data();
  }
}
inline ::TCProto::StopVertexInfo* VertexInfo::release_stop_data() {
  // @@protoc_insertion_point(field_release:TCProto.VertexInfo.stop_data)
  if (_internal_has_stop_data()) {
    clear_has_data();
      ::TCProto::StopVertexInfo* temp = data_.stop_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.stop_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TCProto::StopVertexInfo& VertexInfo::_internal_stop_data() const {
  return _internal_has_stop_data()
      ? *data_.stop_data_
      : reinterpret_cast< ::TCProto::StopVertexInfo&>(::TCProto::_StopVertexInfo_default_instance_);
}
inline const ::TCProto::StopVertexInfo& VertexInfo::stop_data() const {
  // @@protoc_insertion_point(field_get:TCProto.VertexInfo.stop_data)
  return _internal_stop_data();
}
inline ::TCProto::StopVertexInfo* VertexInfo::unsafe_arena_release_stop_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TCProto.VertexInfo.stop_data)
  if (_internal_has_stop_data()) {
    clear_has_data();
    ::TCProto::StopVertexInfo* temp = data_.stop_data_;
    data_.stop_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VertexInfo::unsafe_arena_set_allocated_stop_data(::TCProto::StopVertexInfo* stop_data) {
  clear_data();
  if (stop_data) {
    set_has_stop_data();
    data_.stop_data_ = stop_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.VertexInfo.stop_data)
}
inline ::TCProto::StopVertexInfo* VertexInfo::_internal_mutable_stop_data() {
  if (!_internal_has_stop_data()) {
    clear_data();
    set_has_stop_data();
    data_.stop_data_ = CreateMaybeMessage< ::TCProto::StopVertexInfo >(GetArenaForAllocation());
  }
  return data_.stop_data_;
}
inline ::TCProto::StopVertexInfo* VertexInfo::mutable_stop_data() {
  ::TCProto::StopVertexInfo* _msg = _internal_mutable_stop_data();
  // @@protoc_insertion_point(field_mutable:TCProto.VertexInfo.stop_data)
  return _msg;
}

// .TCProto.CompanyVertexInfo company_data = 2;
inline bool VertexInfo::_internal_has_company_data() const {
  return data_case() == kCompanyData;
}
inline bool VertexInfo::has_company_data() const {
  return _internal_has_company_data();
}
inline void VertexInfo::set_has_company_data() {
  _oneof_case_[0] = kCompanyData;
}
inline void VertexInfo::clear_company_data() {
  if (_internal_has_company_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.company_data_;
    }
    clear_has_data();
  }
}
inline ::TCProto::CompanyVertexInfo* VertexInfo::release_company_data() {
  // @@protoc_insertion_point(field_release:TCProto.VertexInfo.company_data)
  if (_internal_has_company_data()) {
    clear_has_data();
      ::TCProto::CompanyVertexInfo* temp = data_.company_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.company_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TCProto::CompanyVertexInfo& VertexInfo::_internal_company_data() const {
  return _internal_has_company_data()
      ? *data_.company_data_
      : reinterpret_cast< ::TCProto::CompanyVertexInfo&>(::TCProto::_CompanyVertexInfo_default_instance_);
}
inline const ::TCProto::CompanyVertexInfo& VertexInfo::company_data() const {
  // @@protoc_insertion_point(field_get:TCProto.VertexInfo.company_data)
  return _internal_company_data();
}
inline ::TCProto::CompanyVertexInfo* VertexInfo::unsafe_arena_release_company_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TCProto.VertexInfo.company_data)
  if (_internal_has_company_data()) {
    clear_has_data();
    ::TCProto::CompanyVertexInfo* temp = data_.company_data_;
    data_.company_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void VertexInfo::unsafe_arena_set_allocated_company_data(::TCProto::CompanyVertexInfo* company_data) {
  clear_data();
  if (company_data) {
    set_has_company_data();
    data_.company_data_ = company_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.VertexInfo.company_data)
}
inline ::TCProto::CompanyVertexInfo* VertexInfo::_internal_mutable_company_data() {
  if (!_internal_has_company_data()) {
    clear_data();
    set_has_company_data();
    data_.company_data_ = CreateMaybeMessage< ::TCProto::CompanyVertexInfo >(GetArenaForAllocation());
  }
  return data_.company_data_;
}
inline ::TCProto::CompanyVertexInfo* VertexInfo::mutable_company_data() {
  ::TCProto::CompanyVertexInfo* _msg = _internal_mutable_company_data();
  // @@protoc_insertion_point(field_mutable:TCProto.VertexInfo.company_data)
  return _msg;
}

inline bool VertexInfo::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void VertexInfo::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline VertexInfo::DataCase VertexInfo::data_case() const {
  return VertexInfo::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BusEdgeInfo

// string bus_name = 1;
inline void BusEdgeInfo::clear_bus_name() {
  bus_name_.ClearToEmpty();
}
inline const std::string& BusEdgeInfo::bus_name() const {
  // @@protoc_insertion_point(field_get:TCProto.BusEdgeInfo.bus_name)
  return _internal_bus_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BusEdgeInfo::set_bus_name(ArgT0&& arg0, ArgT... args) {
 
 bus_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TCProto.BusEdgeInfo.bus_name)
}
inline std::string* BusEdgeInfo::mutable_bus_name() {
  std::string* _s = _internal_mutable_bus_name();
  // @@protoc_insertion_point(field_mutable:TCProto.BusEdgeInfo.bus_name)
  return _s;
}
inline const std::string& BusEdgeInfo::_internal_bus_name() const {
  return bus_name_.Get();
}
inline void BusEdgeInfo::_internal_set_bus_name(const std::string& value) {
  
  bus_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BusEdgeInfo::_internal_mutable_bus_name() {
  
  return bus_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BusEdgeInfo::release_bus_name() {
  // @@protoc_insertion_point(field_release:TCProto.BusEdgeInfo.bus_name)
  return bus_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BusEdgeInfo::set_allocated_bus_name(std::string* bus_name) {
  if (bus_name != nullptr) {
    
  } else {
    
  }
  bus_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bus_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TCProto.BusEdgeInfo.bus_name)
}

// uint32 start_stop_idx = 2;
inline void BusEdgeInfo::clear_start_stop_idx() {
  start_stop_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::_internal_start_stop_idx() const {
  return start_stop_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::start_stop_idx() const {
  // @@protoc_insertion_point(field_get:TCProto.BusEdgeInfo.start_stop_idx)
  return _internal_start_stop_idx();
}
inline void BusEdgeInfo::_internal_set_start_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  start_stop_idx_ = value;
}
inline void BusEdgeInfo::set_start_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_stop_idx(value);
  // @@protoc_insertion_point(field_set:TCProto.BusEdgeInfo.start_stop_idx)
}

// uint32 finish_stop_idx = 3;
inline void BusEdgeInfo::clear_finish_stop_idx() {
  finish_stop_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::_internal_finish_stop_idx() const {
  return finish_stop_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::finish_stop_idx() const {
  // @@protoc_insertion_point(field_get:TCProto.BusEdgeInfo.finish_stop_idx)
  return _internal_finish_stop_idx();
}
inline void BusEdgeInfo::_internal_set_finish_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  finish_stop_idx_ = value;
}
inline void BusEdgeInfo::set_finish_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_finish_stop_idx(value);
  // @@protoc_insertion_point(field_set:TCProto.BusEdgeInfo.finish_stop_idx)
}

// -------------------------------------------------------------------

// WaitEdgeInfo

// -------------------------------------------------------------------

// CompanyEdgeInfo

// string stop_name = 1;
inline void CompanyEdgeInfo::clear_stop_name() {
  stop_name_.ClearToEmpty();
}
inline const std::string& CompanyEdgeInfo::stop_name() const {
  // @@protoc_insertion_point(field_get:TCProto.CompanyEdgeInfo.stop_name)
  return _internal_stop_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompanyEdgeInfo::set_stop_name(ArgT0&& arg0, ArgT... args) {
 
 stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TCProto.CompanyEdgeInfo.stop_name)
}
inline std::string* CompanyEdgeInfo::mutable_stop_name() {
  std::string* _s = _internal_mutable_stop_name();
  // @@protoc_insertion_point(field_mutable:TCProto.CompanyEdgeInfo.stop_name)
  return _s;
}
inline const std::string& CompanyEdgeInfo::_internal_stop_name() const {
  return stop_name_.Get();
}
inline void CompanyEdgeInfo::_internal_set_stop_name(const std::string& value) {
  
  stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CompanyEdgeInfo::_internal_mutable_stop_name() {
  
  return stop_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CompanyEdgeInfo::release_stop_name() {
  // @@protoc_insertion_point(field_release:TCProto.CompanyEdgeInfo.stop_name)
  return stop_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CompanyEdgeInfo::set_allocated_stop_name(std::string* stop_name) {
  if (stop_name != nullptr) {
    
  } else {
    
  }
  stop_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stop_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TCProto.CompanyEdgeInfo.stop_name)
}

// uint32 company_id = 2;
inline void CompanyEdgeInfo::clear_company_id() {
  company_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompanyEdgeInfo::_internal_company_id() const {
  return company_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CompanyEdgeInfo::company_id() const {
  // @@protoc_insertion_point(field_get:TCProto.CompanyEdgeInfo.company_id)
  return _internal_company_id();
}
inline void CompanyEdgeInfo::_internal_set_company_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  company_id_ = value;
}
inline void CompanyEdgeInfo::set_company_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_company_id(value);
  // @@protoc_insertion_point(field_set:TCProto.CompanyEdgeInfo.company_id)
}

// -------------------------------------------------------------------

// EdgeInfo

// .TCProto.BusEdgeInfo bus_data = 1;
inline bool EdgeInfo::_internal_has_bus_data() const {
  return data_case() == kBusData;
}
inline bool EdgeInfo::has_bus_data() const {
  return _internal_has_bus_data();
}
inline void EdgeInfo::set_has_bus_data() {
  _oneof_case_[0] = kBusData;
}
inline void EdgeInfo::clear_bus_data() {
  if (_internal_has_bus_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.bus_data_;
    }
    clear_has_data();
  }
}
inline ::TCProto::BusEdgeInfo* EdgeInfo::release_bus_data() {
  // @@protoc_insertion_point(field_release:TCProto.EdgeInfo.bus_data)
  if (_internal_has_bus_data()) {
    clear_has_data();
      ::TCProto::BusEdgeInfo* temp = data_.bus_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.bus_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TCProto::BusEdgeInfo& EdgeInfo::_internal_bus_data() const {
  return _internal_has_bus_data()
      ? *data_.bus_data_
      : reinterpret_cast< ::TCProto::BusEdgeInfo&>(::TCProto::_BusEdgeInfo_default_instance_);
}
inline const ::TCProto::BusEdgeInfo& EdgeInfo::bus_data() const {
  // @@protoc_insertion_point(field_get:TCProto.EdgeInfo.bus_data)
  return _internal_bus_data();
}
inline ::TCProto::BusEdgeInfo* EdgeInfo::unsafe_arena_release_bus_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TCProto.EdgeInfo.bus_data)
  if (_internal_has_bus_data()) {
    clear_has_data();
    ::TCProto::BusEdgeInfo* temp = data_.bus_data_;
    data_.bus_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EdgeInfo::unsafe_arena_set_allocated_bus_data(::TCProto::BusEdgeInfo* bus_data) {
  clear_data();
  if (bus_data) {
    set_has_bus_data();
    data_.bus_data_ = bus_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.EdgeInfo.bus_data)
}
inline ::TCProto::BusEdgeInfo* EdgeInfo::_internal_mutable_bus_data() {
  if (!_internal_has_bus_data()) {
    clear_data();
    set_has_bus_data();
    data_.bus_data_ = CreateMaybeMessage< ::TCProto::BusEdgeInfo >(GetArenaForAllocation());
  }
  return data_.bus_data_;
}
inline ::TCProto::BusEdgeInfo* EdgeInfo::mutable_bus_data() {
  ::TCProto::BusEdgeInfo* _msg = _internal_mutable_bus_data();
  // @@protoc_insertion_point(field_mutable:TCProto.EdgeInfo.bus_data)
  return _msg;
}

// .TCProto.WaitEdgeInfo wait_data = 2;
inline bool EdgeInfo::_internal_has_wait_data() const {
  return data_case() == kWaitData;
}
inline bool EdgeInfo::has_wait_data() const {
  return _internal_has_wait_data();
}
inline void EdgeInfo::set_has_wait_data() {
  _oneof_case_[0] = kWaitData;
}
inline void EdgeInfo::clear_wait_data() {
  if (_internal_has_wait_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.wait_data_;
    }
    clear_has_data();
  }
}
inline ::TCProto::WaitEdgeInfo* EdgeInfo::release_wait_data() {
  // @@protoc_insertion_point(field_release:TCProto.EdgeInfo.wait_data)
  if (_internal_has_wait_data()) {
    clear_has_data();
      ::TCProto::WaitEdgeInfo* temp = data_.wait_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.wait_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TCProto::WaitEdgeInfo& EdgeInfo::_internal_wait_data() const {
  return _internal_has_wait_data()
      ? *data_.wait_data_
      : reinterpret_cast< ::TCProto::WaitEdgeInfo&>(::TCProto::_WaitEdgeInfo_default_instance_);
}
inline const ::TCProto::WaitEdgeInfo& EdgeInfo::wait_data() const {
  // @@protoc_insertion_point(field_get:TCProto.EdgeInfo.wait_data)
  return _internal_wait_data();
}
inline ::TCProto::WaitEdgeInfo* EdgeInfo::unsafe_arena_release_wait_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TCProto.EdgeInfo.wait_data)
  if (_internal_has_wait_data()) {
    clear_has_data();
    ::TCProto::WaitEdgeInfo* temp = data_.wait_data_;
    data_.wait_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EdgeInfo::unsafe_arena_set_allocated_wait_data(::TCProto::WaitEdgeInfo* wait_data) {
  clear_data();
  if (wait_data) {
    set_has_wait_data();
    data_.wait_data_ = wait_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.EdgeInfo.wait_data)
}
inline ::TCProto::WaitEdgeInfo* EdgeInfo::_internal_mutable_wait_data() {
  if (!_internal_has_wait_data()) {
    clear_data();
    set_has_wait_data();
    data_.wait_data_ = CreateMaybeMessage< ::TCProto::WaitEdgeInfo >(GetArenaForAllocation());
  }
  return data_.wait_data_;
}
inline ::TCProto::WaitEdgeInfo* EdgeInfo::mutable_wait_data() {
  ::TCProto::WaitEdgeInfo* _msg = _internal_mutable_wait_data();
  // @@protoc_insertion_point(field_mutable:TCProto.EdgeInfo.wait_data)
  return _msg;
}

// .TCProto.CompanyEdgeInfo company_data = 3;
inline bool EdgeInfo::_internal_has_company_data() const {
  return data_case() == kCompanyData;
}
inline bool EdgeInfo::has_company_data() const {
  return _internal_has_company_data();
}
inline void EdgeInfo::set_has_company_data() {
  _oneof_case_[0] = kCompanyData;
}
inline void EdgeInfo::clear_company_data() {
  if (_internal_has_company_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.company_data_;
    }
    clear_has_data();
  }
}
inline ::TCProto::CompanyEdgeInfo* EdgeInfo::release_company_data() {
  // @@protoc_insertion_point(field_release:TCProto.EdgeInfo.company_data)
  if (_internal_has_company_data()) {
    clear_has_data();
      ::TCProto::CompanyEdgeInfo* temp = data_.company_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.company_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::TCProto::CompanyEdgeInfo& EdgeInfo::_internal_company_data() const {
  return _internal_has_company_data()
      ? *data_.company_data_
      : reinterpret_cast< ::TCProto::CompanyEdgeInfo&>(::TCProto::_CompanyEdgeInfo_default_instance_);
}
inline const ::TCProto::CompanyEdgeInfo& EdgeInfo::company_data() const {
  // @@protoc_insertion_point(field_get:TCProto.EdgeInfo.company_data)
  return _internal_company_data();
}
inline ::TCProto::CompanyEdgeInfo* EdgeInfo::unsafe_arena_release_company_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TCProto.EdgeInfo.company_data)
  if (_internal_has_company_data()) {
    clear_has_data();
    ::TCProto::CompanyEdgeInfo* temp = data_.company_data_;
    data_.company_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EdgeInfo::unsafe_arena_set_allocated_company_data(::TCProto::CompanyEdgeInfo* company_data) {
  clear_data();
  if (company_data) {
    set_has_company_data();
    data_.company_data_ = company_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.EdgeInfo.company_data)
}
inline ::TCProto::CompanyEdgeInfo* EdgeInfo::_internal_mutable_company_data() {
  if (!_internal_has_company_data()) {
    clear_data();
    set_has_company_data();
    data_.company_data_ = CreateMaybeMessage< ::TCProto::CompanyEdgeInfo >(GetArenaForAllocation());
  }
  return data_.company_data_;
}
inline ::TCProto::CompanyEdgeInfo* EdgeInfo::mutable_company_data() {
  ::TCProto::CompanyEdgeInfo* _msg = _internal_mutable_company_data();
  // @@protoc_insertion_point(field_mutable:TCProto.EdgeInfo.company_data)
  return _msg;
}

inline bool EdgeInfo::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void EdgeInfo::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline EdgeInfo::DataCase EdgeInfo::data_case() const {
  return EdgeInfo::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransportRouter

// .TCProto.RoutingSettings routing_settings = 1;
inline bool TransportRouter::_internal_has_routing_settings() const {
  return this != internal_default_instance() && routing_settings_ != nullptr;
}
inline bool TransportRouter::has_routing_settings() const {
  return _internal_has_routing_settings();
}
inline void TransportRouter::clear_routing_settings() {
  if (GetArenaForAllocation() == nullptr && routing_settings_ != nullptr) {
    delete routing_settings_;
  }
  routing_settings_ = nullptr;
}
inline const ::TCProto::RoutingSettings& TransportRouter::_internal_routing_settings() const {
  const ::TCProto::RoutingSettings* p = routing_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::TCProto::RoutingSettings&>(
      ::TCProto::_RoutingSettings_default_instance_);
}
inline const ::TCProto::RoutingSettings& TransportRouter::routing_settings() const {
  // @@protoc_insertion_point(field_get:TCProto.TransportRouter.routing_settings)
  return _internal_routing_settings();
}
inline void TransportRouter::unsafe_arena_set_allocated_routing_settings(
    ::TCProto::RoutingSettings* routing_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_settings_);
  }
  routing_settings_ = routing_settings;
  if (routing_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.TransportRouter.routing_settings)
}
inline ::TCProto::RoutingSettings* TransportRouter::release_routing_settings() {
  
  ::TCProto::RoutingSettings* temp = routing_settings_;
  routing_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TCProto::RoutingSettings* TransportRouter::unsafe_arena_release_routing_settings() {
  // @@protoc_insertion_point(field_release:TCProto.TransportRouter.routing_settings)
  
  ::TCProto::RoutingSettings* temp = routing_settings_;
  routing_settings_ = nullptr;
  return temp;
}
inline ::TCProto::RoutingSettings* TransportRouter::_internal_mutable_routing_settings() {
  
  if (routing_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::TCProto::RoutingSettings>(GetArenaForAllocation());
    routing_settings_ = p;
  }
  return routing_settings_;
}
inline ::TCProto::RoutingSettings* TransportRouter::mutable_routing_settings() {
  ::TCProto::RoutingSettings* _msg = _internal_mutable_routing_settings();
  // @@protoc_insertion_point(field_mutable:TCProto.TransportRouter.routing_settings)
  return _msg;
}
inline void TransportRouter::set_allocated_routing_settings(::TCProto::RoutingSettings* routing_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete routing_settings_;
  }
  if (routing_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TCProto::RoutingSettings>::GetOwningArena(routing_settings);
    if (message_arena != submessage_arena) {
      routing_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_settings, submessage_arena);
    }
    
  } else {
    
  }
  routing_settings_ = routing_settings;
  // @@protoc_insertion_point(field_set_allocated:TCProto.TransportRouter.routing_settings)
}

// .GraphProto.DirectedWeightedGraph graph = 2;
inline bool TransportRouter::_internal_has_graph() const {
  return this != internal_default_instance() && graph_ != nullptr;
}
inline bool TransportRouter::has_graph() const {
  return _internal_has_graph();
}
inline const ::GraphProto::DirectedWeightedGraph& TransportRouter::_internal_graph() const {
  const ::GraphProto::DirectedWeightedGraph* p = graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::GraphProto::DirectedWeightedGraph&>(
      ::GraphProto::_DirectedWeightedGraph_default_instance_);
}
inline const ::GraphProto::DirectedWeightedGraph& TransportRouter::graph() const {
  // @@protoc_insertion_point(field_get:TCProto.TransportRouter.graph)
  return _internal_graph();
}
inline void TransportRouter::unsafe_arena_set_allocated_graph(
    ::GraphProto::DirectedWeightedGraph* graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.TransportRouter.graph)
}
inline ::GraphProto::DirectedWeightedGraph* TransportRouter::release_graph() {
  
  ::GraphProto::DirectedWeightedGraph* temp = graph_;
  graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GraphProto::DirectedWeightedGraph* TransportRouter::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:TCProto.TransportRouter.graph)
  
  ::GraphProto::DirectedWeightedGraph* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::GraphProto::DirectedWeightedGraph* TransportRouter::_internal_mutable_graph() {
  
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::GraphProto::DirectedWeightedGraph>(GetArenaForAllocation());
    graph_ = p;
  }
  return graph_;
}
inline ::GraphProto::DirectedWeightedGraph* TransportRouter::mutable_graph() {
  ::GraphProto::DirectedWeightedGraph* _msg = _internal_mutable_graph();
  // @@protoc_insertion_point(field_mutable:TCProto.TransportRouter.graph)
  return _msg;
}
inline void TransportRouter::set_allocated_graph(::GraphProto::DirectedWeightedGraph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph));
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:TCProto.TransportRouter.graph)
}

// .GraphProto.Router router = 3;
inline bool TransportRouter::_internal_has_router() const {
  return this != internal_default_instance() && router_ != nullptr;
}
inline bool TransportRouter::has_router() const {
  return _internal_has_router();
}
inline const ::GraphProto::Router& TransportRouter::_internal_router() const {
  const ::GraphProto::Router* p = router_;
  return p != nullptr ? *p : reinterpret_cast<const ::GraphProto::Router&>(
      ::GraphProto::_Router_default_instance_);
}
inline const ::GraphProto::Router& TransportRouter::router() const {
  // @@protoc_insertion_point(field_get:TCProto.TransportRouter.router)
  return _internal_router();
}
inline void TransportRouter::unsafe_arena_set_allocated_router(
    ::GraphProto::Router* router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_);
  }
  router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.TransportRouter.router)
}
inline ::GraphProto::Router* TransportRouter::release_router() {
  
  ::GraphProto::Router* temp = router_;
  router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GraphProto::Router* TransportRouter::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:TCProto.TransportRouter.router)
  
  ::GraphProto::Router* temp = router_;
  router_ = nullptr;
  return temp;
}
inline ::GraphProto::Router* TransportRouter::_internal_mutable_router() {
  
  if (router_ == nullptr) {
    auto* p = CreateMaybeMessage<::GraphProto::Router>(GetArenaForAllocation());
    router_ = p;
  }
  return router_;
}
inline ::GraphProto::Router* TransportRouter::mutable_router() {
  ::GraphProto::Router* _msg = _internal_mutable_router();
  // @@protoc_insertion_point(field_mutable:TCProto.TransportRouter.router)
  return _msg;
}
inline void TransportRouter::set_allocated_router(::GraphProto::Router* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_);
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router));
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  router_ = router;
  // @@protoc_insertion_point(field_set_allocated:TCProto.TransportRouter.router)
}

// repeated .TCProto.StopVertexIds stops_vertex_ids = 4;
inline int TransportRouter::_internal_stops_vertex_ids_size() const {
  return stops_vertex_ids_.size();
}
inline int TransportRouter::stops_vertex_ids_size() const {
  return _internal_stops_vertex_ids_size();
}
inline void TransportRouter::clear_stops_vertex_ids() {
  stops_vertex_ids_.Clear();
}
inline ::TCProto::StopVertexIds* TransportRouter::mutable_stops_vertex_ids(int index) {
  // @@protoc_insertion_point(field_mutable:TCProto.TransportRouter.stops_vertex_ids)
  return stops_vertex_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::StopVertexIds >*
TransportRouter::mutable_stops_vertex_ids() {
  // @@protoc_insertion_point(field_mutable_list:TCProto.TransportRouter.stops_vertex_ids)
  return &stops_vertex_ids_;
}
inline const ::TCProto::StopVertexIds& TransportRouter::_internal_stops_vertex_ids(int index) const {
  return stops_vertex_ids_.Get(index);
}
inline const ::TCProto::StopVertexIds& TransportRouter::stops_vertex_ids(int index) const {
  // @@protoc_insertion_point(field_get:TCProto.TransportRouter.stops_vertex_ids)
  return _internal_stops_vertex_ids(index);
}
inline ::TCProto::StopVertexIds* TransportRouter::_internal_add_stops_vertex_ids() {
  return stops_vertex_ids_.Add();
}
inline ::TCProto::StopVertexIds* TransportRouter::add_stops_vertex_ids() {
  ::TCProto::StopVertexIds* _add = _internal_add_stops_vertex_ids();
  // @@protoc_insertion_point(field_add:TCProto.TransportRouter.stops_vertex_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::StopVertexIds >&
TransportRouter::stops_vertex_ids() const {
  // @@protoc_insertion_point(field_list:TCProto.TransportRouter.stops_vertex_ids)
  return stops_vertex_ids_;
}

// repeated uint32 companies_vertex_id = 7;
inline int TransportRouter::_internal_companies_vertex_id_size() const {
  return companies_vertex_id_.size();
}
inline int TransportRouter::companies_vertex_id_size() const {
  return _internal_companies_vertex_id_size();
}
inline void TransportRouter::clear_companies_vertex_id() {
  companies_vertex_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransportRouter::_internal_companies_vertex_id(int index) const {
  return companies_vertex_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransportRouter::companies_vertex_id(int index) const {
  // @@protoc_insertion_point(field_get:TCProto.TransportRouter.companies_vertex_id)
  return _internal_companies_vertex_id(index);
}
inline void TransportRouter::set_companies_vertex_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  companies_vertex_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:TCProto.TransportRouter.companies_vertex_id)
}
inline void TransportRouter::_internal_add_companies_vertex_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  companies_vertex_id_.Add(value);
}
inline void TransportRouter::add_companies_vertex_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_companies_vertex_id(value);
  // @@protoc_insertion_point(field_add:TCProto.TransportRouter.companies_vertex_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TransportRouter::_internal_companies_vertex_id() const {
  return companies_vertex_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TransportRouter::companies_vertex_id() const {
  // @@protoc_insertion_point(field_list:TCProto.TransportRouter.companies_vertex_id)
  return _internal_companies_vertex_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TransportRouter::_internal_mutable_companies_vertex_id() {
  return &companies_vertex_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TransportRouter::mutable_companies_vertex_id() {
  // @@protoc_insertion_point(field_mutable_list:TCProto.TransportRouter.companies_vertex_id)
  return _internal_mutable_companies_vertex_id();
}

// repeated .TCProto.VertexInfo vertices_info = 5;
inline int TransportRouter::_internal_vertices_info_size() const {
  return vertices_info_.size();
}
inline int TransportRouter::vertices_info_size() const {
  return _internal_vertices_info_size();
}
inline void TransportRouter::clear_vertices_info() {
  vertices_info_.Clear();
}
inline ::TCProto::VertexInfo* TransportRouter::mutable_vertices_info(int index) {
  // @@protoc_insertion_point(field_mutable:TCProto.TransportRouter.vertices_info)
  return vertices_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::VertexInfo >*
TransportRouter::mutable_vertices_info() {
  // @@protoc_insertion_point(field_mutable_list:TCProto.TransportRouter.vertices_info)
  return &vertices_info_;
}
inline const ::TCProto::VertexInfo& TransportRouter::_internal_vertices_info(int index) const {
  return vertices_info_.Get(index);
}
inline const ::TCProto::VertexInfo& TransportRouter::vertices_info(int index) const {
  // @@protoc_insertion_point(field_get:TCProto.TransportRouter.vertices_info)
  return _internal_vertices_info(index);
}
inline ::TCProto::VertexInfo* TransportRouter::_internal_add_vertices_info() {
  return vertices_info_.Add();
}
inline ::TCProto::VertexInfo* TransportRouter::add_vertices_info() {
  ::TCProto::VertexInfo* _add = _internal_add_vertices_info();
  // @@protoc_insertion_point(field_add:TCProto.TransportRouter.vertices_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::VertexInfo >&
TransportRouter::vertices_info() const {
  // @@protoc_insertion_point(field_list:TCProto.TransportRouter.vertices_info)
  return vertices_info_;
}

// repeated .TCProto.EdgeInfo edges_info = 6;
inline int TransportRouter::_internal_edges_info_size() const {
  return edges_info_.size();
}
inline int TransportRouter::edges_info_size() const {
  return _internal_edges_info_size();
}
inline void TransportRouter::clear_edges_info() {
  edges_info_.Clear();
}
inline ::TCProto::EdgeInfo* TransportRouter::mutable_edges_info(int index) {
  // @@protoc_insertion_point(field_mutable:TCProto.TransportRouter.edges_info)
  return edges_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::EdgeInfo >*
TransportRouter::mutable_edges_info() {
  // @@protoc_insertion_point(field_mutable_list:TCProto.TransportRouter.edges_info)
  return &edges_info_;
}
inline const ::TCProto::EdgeInfo& TransportRouter::_internal_edges_info(int index) const {
  return edges_info_.Get(index);
}
inline const ::TCProto::EdgeInfo& TransportRouter::edges_info(int index) const {
  // @@protoc_insertion_point(field_get:TCProto.TransportRouter.edges_info)
  return _internal_edges_info(index);
}
inline ::TCProto::EdgeInfo* TransportRouter::_internal_add_edges_info() {
  return edges_info_.Add();
}
inline ::TCProto::EdgeInfo* TransportRouter::add_edges_info() {
  ::TCProto::EdgeInfo* _add = _internal_add_edges_info();
  // @@protoc_insertion_point(field_add:TCProto.TransportRouter.edges_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::EdgeInfo >&
TransportRouter::edges_info() const {
  // @@protoc_insertion_point(field_list:TCProto.TransportRouter.edges_info)
  return edges_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TCProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
