// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_renderer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_map_5frenderer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_map_5frenderer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "descriptions.pb.h"
#include "svg.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_map_5frenderer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_map_5frenderer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5frenderer_2eproto;
namespace TCProto {
class BusColor;
struct BusColorDefaultTypeInternal;
extern BusColorDefaultTypeInternal _BusColor_default_instance_;
class MapRenderer;
struct MapRendererDefaultTypeInternal;
extern MapRendererDefaultTypeInternal _MapRenderer_default_instance_;
class PointsMaps;
struct PointsMapsDefaultTypeInternal;
extern PointsMapsDefaultTypeInternal _PointsMaps_default_instance_;
class RenderSettings;
struct RenderSettingsDefaultTypeInternal;
extern RenderSettingsDefaultTypeInternal _RenderSettings_default_instance_;
class StopCoords;
struct StopCoordsDefaultTypeInternal;
extern StopCoordsDefaultTypeInternal _StopCoords_default_instance_;
}  // namespace TCProto
PROTOBUF_NAMESPACE_OPEN
template<> ::TCProto::BusColor* Arena::CreateMaybeMessage<::TCProto::BusColor>(Arena*);
template<> ::TCProto::MapRenderer* Arena::CreateMaybeMessage<::TCProto::MapRenderer>(Arena*);
template<> ::TCProto::PointsMaps* Arena::CreateMaybeMessage<::TCProto::PointsMaps>(Arena*);
template<> ::TCProto::RenderSettings* Arena::CreateMaybeMessage<::TCProto::RenderSettings>(Arena*);
template<> ::TCProto::StopCoords* Arena::CreateMaybeMessage<::TCProto::StopCoords>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TCProto {

// ===================================================================

class RenderSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.RenderSettings) */ {
 public:
  inline RenderSettings() : RenderSettings(nullptr) {}
  ~RenderSettings() override;
  explicit constexpr RenderSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenderSettings(const RenderSettings& from);
  RenderSettings(RenderSettings&& from) noexcept
    : RenderSettings() {
    *this = ::std::move(from);
  }

  inline RenderSettings& operator=(const RenderSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderSettings& operator=(RenderSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenderSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenderSettings* internal_default_instance() {
    return reinterpret_cast<const RenderSettings*>(
               &_RenderSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RenderSettings& a, RenderSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderSettings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenderSettings* New() const final {
    return new RenderSettings();
  }

  RenderSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenderSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenderSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RenderSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.RenderSettings";
  }
  protected:
  explicit RenderSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaletteFieldNumber = 5,
    kLayersFieldNumber = 14,
    kUnderlayerColorFieldNumber = 7,
    kBusLabelOffsetFieldNumber = 10,
    kStopLabelOffsetFieldNumber = 12,
    kMaxWidthFieldNumber = 1,
    kMaxHeightFieldNumber = 2,
    kPaddingFieldNumber = 3,
    kOuterMarginFieldNumber = 4,
    kLineWidthFieldNumber = 6,
    kUnderlayerWidthFieldNumber = 8,
    kStopRadiusFieldNumber = 9,
    kBusLabelFontSizeFieldNumber = 11,
    kStopLabelFontSizeFieldNumber = 13,
    kCompanyLineWidthFieldNumber = 15,
    kCompanyRadiusFieldNumber = 16,
  };
  // repeated .SvgProto.Color palette = 5;
  int palette_size() const;
  private:
  int _internal_palette_size() const;
  public:
  void clear_palette();
  ::SvgProto::Color* mutable_palette(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SvgProto::Color >*
      mutable_palette();
  private:
  const ::SvgProto::Color& _internal_palette(int index) const;
  ::SvgProto::Color* _internal_add_palette();
  public:
  const ::SvgProto::Color& palette(int index) const;
  ::SvgProto::Color* add_palette();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SvgProto::Color >&
      palette() const;

  // repeated string layers = 14;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  const std::string& layers(int index) const;
  std::string* mutable_layers(int index);
  void set_layers(int index, const std::string& value);
  void set_layers(int index, std::string&& value);
  void set_layers(int index, const char* value);
  void set_layers(int index, const char* value, size_t size);
  std::string* add_layers();
  void add_layers(const std::string& value);
  void add_layers(std::string&& value);
  void add_layers(const char* value);
  void add_layers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& layers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_layers();
  private:
  const std::string& _internal_layers(int index) const;
  std::string* _internal_add_layers();
  public:

  // .SvgProto.Color underlayer_color = 7;
  bool has_underlayer_color() const;
  private:
  bool _internal_has_underlayer_color() const;
  public:
  void clear_underlayer_color();
  const ::SvgProto::Color& underlayer_color() const;
  PROTOBUF_MUST_USE_RESULT ::SvgProto::Color* release_underlayer_color();
  ::SvgProto::Color* mutable_underlayer_color();
  void set_allocated_underlayer_color(::SvgProto::Color* underlayer_color);
  private:
  const ::SvgProto::Color& _internal_underlayer_color() const;
  ::SvgProto::Color* _internal_mutable_underlayer_color();
  public:
  void unsafe_arena_set_allocated_underlayer_color(
      ::SvgProto::Color* underlayer_color);
  ::SvgProto::Color* unsafe_arena_release_underlayer_color();

  // .SvgProto.Point bus_label_offset = 10;
  bool has_bus_label_offset() const;
  private:
  bool _internal_has_bus_label_offset() const;
  public:
  void clear_bus_label_offset();
  const ::SvgProto::Point& bus_label_offset() const;
  PROTOBUF_MUST_USE_RESULT ::SvgProto::Point* release_bus_label_offset();
  ::SvgProto::Point* mutable_bus_label_offset();
  void set_allocated_bus_label_offset(::SvgProto::Point* bus_label_offset);
  private:
  const ::SvgProto::Point& _internal_bus_label_offset() const;
  ::SvgProto::Point* _internal_mutable_bus_label_offset();
  public:
  void unsafe_arena_set_allocated_bus_label_offset(
      ::SvgProto::Point* bus_label_offset);
  ::SvgProto::Point* unsafe_arena_release_bus_label_offset();

  // .SvgProto.Point stop_label_offset = 12;
  bool has_stop_label_offset() const;
  private:
  bool _internal_has_stop_label_offset() const;
  public:
  void clear_stop_label_offset();
  const ::SvgProto::Point& stop_label_offset() const;
  PROTOBUF_MUST_USE_RESULT ::SvgProto::Point* release_stop_label_offset();
  ::SvgProto::Point* mutable_stop_label_offset();
  void set_allocated_stop_label_offset(::SvgProto::Point* stop_label_offset);
  private:
  const ::SvgProto::Point& _internal_stop_label_offset() const;
  ::SvgProto::Point* _internal_mutable_stop_label_offset();
  public:
  void unsafe_arena_set_allocated_stop_label_offset(
      ::SvgProto::Point* stop_label_offset);
  ::SvgProto::Point* unsafe_arena_release_stop_label_offset();

  // double max_width = 1;
  void clear_max_width();
  double max_width() const;
  void set_max_width(double value);
  private:
  double _internal_max_width() const;
  void _internal_set_max_width(double value);
  public:

  // double max_height = 2;
  void clear_max_height();
  double max_height() const;
  void set_max_height(double value);
  private:
  double _internal_max_height() const;
  void _internal_set_max_height(double value);
  public:

  // double padding = 3;
  void clear_padding();
  double padding() const;
  void set_padding(double value);
  private:
  double _internal_padding() const;
  void _internal_set_padding(double value);
  public:

  // double outer_margin = 4;
  void clear_outer_margin();
  double outer_margin() const;
  void set_outer_margin(double value);
  private:
  double _internal_outer_margin() const;
  void _internal_set_outer_margin(double value);
  public:

  // double line_width = 6;
  void clear_line_width();
  double line_width() const;
  void set_line_width(double value);
  private:
  double _internal_line_width() const;
  void _internal_set_line_width(double value);
  public:

  // double underlayer_width = 8;
  void clear_underlayer_width();
  double underlayer_width() const;
  void set_underlayer_width(double value);
  private:
  double _internal_underlayer_width() const;
  void _internal_set_underlayer_width(double value);
  public:

  // double stop_radius = 9;
  void clear_stop_radius();
  double stop_radius() const;
  void set_stop_radius(double value);
  private:
  double _internal_stop_radius() const;
  void _internal_set_stop_radius(double value);
  public:

  // int32 bus_label_font_size = 11;
  void clear_bus_label_font_size();
  ::PROTOBUF_NAMESPACE_ID::int32 bus_label_font_size() const;
  void set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bus_label_font_size() const;
  void _internal_set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stop_label_font_size = 13;
  void clear_stop_label_font_size();
  ::PROTOBUF_NAMESPACE_ID::int32 stop_label_font_size() const;
  void set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stop_label_font_size() const;
  void _internal_set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double company_line_width = 15;
  void clear_company_line_width();
  double company_line_width() const;
  void set_company_line_width(double value);
  private:
  double _internal_company_line_width() const;
  void _internal_set_company_line_width(double value);
  public:

  // double company_radius = 16;
  void clear_company_radius();
  double company_radius() const;
  void set_company_radius(double value);
  private:
  double _internal_company_radius() const;
  void _internal_set_company_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:TCProto.RenderSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SvgProto::Color > palette_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> layers_;
  ::SvgProto::Color* underlayer_color_;
  ::SvgProto::Point* bus_label_offset_;
  ::SvgProto::Point* stop_label_offset_;
  double max_width_;
  double max_height_;
  double padding_;
  double outer_margin_;
  double line_width_;
  double underlayer_width_;
  double stop_radius_;
  ::PROTOBUF_NAMESPACE_ID::int32 bus_label_font_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 stop_label_font_size_;
  double company_line_width_;
  double company_radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class StopCoords final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.StopCoords) */ {
 public:
  inline StopCoords() : StopCoords(nullptr) {}
  ~StopCoords() override;
  explicit constexpr StopCoords(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopCoords(const StopCoords& from);
  StopCoords(StopCoords&& from) noexcept
    : StopCoords() {
    *this = ::std::move(from);
  }

  inline StopCoords& operator=(const StopCoords& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopCoords& operator=(StopCoords&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopCoords& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopCoords* internal_default_instance() {
    return reinterpret_cast<const StopCoords*>(
               &_StopCoords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StopCoords& a, StopCoords& b) {
    a.Swap(&b);
  }
  inline void Swap(StopCoords* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopCoords* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopCoords* New() const final {
    return new StopCoords();
  }

  StopCoords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopCoords>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopCoords& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopCoords& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopCoords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.StopCoords";
  }
  protected:
  explicit StopCoords(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPointFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .SvgProto.Point point = 2;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::SvgProto::Point& point() const;
  PROTOBUF_MUST_USE_RESULT ::SvgProto::Point* release_point();
  ::SvgProto::Point* mutable_point();
  void set_allocated_point(::SvgProto::Point* point);
  private:
  const ::SvgProto::Point& _internal_point() const;
  ::SvgProto::Point* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::SvgProto::Point* point);
  ::SvgProto::Point* unsafe_arena_release_point();

  // @@protoc_insertion_point(class_scope:TCProto.StopCoords)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::SvgProto::Point* point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class PointsMaps final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.PointsMaps) */ {
 public:
  inline PointsMaps() : PointsMaps(nullptr) {}
  ~PointsMaps() override;
  explicit constexpr PointsMaps(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointsMaps(const PointsMaps& from);
  PointsMaps(PointsMaps&& from) noexcept
    : PointsMaps() {
    *this = ::std::move(from);
  }

  inline PointsMaps& operator=(const PointsMaps& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointsMaps& operator=(PointsMaps&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointsMaps& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointsMaps* internal_default_instance() {
    return reinterpret_cast<const PointsMaps*>(
               &_PointsMaps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PointsMaps& a, PointsMaps& b) {
    a.Swap(&b);
  }
  inline void Swap(PointsMaps* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointsMaps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointsMaps* New() const final {
    return new PointsMaps();
  }

  PointsMaps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointsMaps>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PointsMaps& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PointsMaps& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointsMaps* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.PointsMaps";
  }
  protected:
  explicit PointsMaps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kCompaniesFieldNumber = 2,
  };
  // repeated .TCProto.StopCoords stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::TCProto::StopCoords* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::StopCoords >*
      mutable_stops();
  private:
  const ::TCProto::StopCoords& _internal_stops(int index) const;
  ::TCProto::StopCoords* _internal_add_stops();
  public:
  const ::TCProto::StopCoords& stops(int index) const;
  ::TCProto::StopCoords* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::StopCoords >&
      stops() const;

  // repeated .SvgProto.Point companies = 2;
  int companies_size() const;
  private:
  int _internal_companies_size() const;
  public:
  void clear_companies();
  ::SvgProto::Point* mutable_companies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SvgProto::Point >*
      mutable_companies();
  private:
  const ::SvgProto::Point& _internal_companies(int index) const;
  ::SvgProto::Point* _internal_add_companies();
  public:
  const ::SvgProto::Point& companies(int index) const;
  ::SvgProto::Point* add_companies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SvgProto::Point >&
      companies() const;

  // @@protoc_insertion_point(class_scope:TCProto.PointsMaps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::StopCoords > stops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SvgProto::Point > companies_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class BusColor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.BusColor) */ {
 public:
  inline BusColor() : BusColor(nullptr) {}
  ~BusColor() override;
  explicit constexpr BusColor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusColor(const BusColor& from);
  BusColor(BusColor&& from) noexcept
    : BusColor() {
    *this = ::std::move(from);
  }

  inline BusColor& operator=(const BusColor& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusColor& operator=(BusColor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusColor& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusColor* internal_default_instance() {
    return reinterpret_cast<const BusColor*>(
               &_BusColor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BusColor& a, BusColor& b) {
    a.Swap(&b);
  }
  inline void Swap(BusColor* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusColor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusColor* New() const final {
    return new BusColor();
  }

  BusColor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusColor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusColor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BusColor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusColor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.BusColor";
  }
  protected:
  explicit BusColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kColorFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .SvgProto.Color color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::SvgProto::Color& color() const;
  PROTOBUF_MUST_USE_RESULT ::SvgProto::Color* release_color();
  ::SvgProto::Color* mutable_color();
  void set_allocated_color(::SvgProto::Color* color);
  private:
  const ::SvgProto::Color& _internal_color() const;
  ::SvgProto::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::SvgProto::Color* color);
  ::SvgProto::Color* unsafe_arena_release_color();

  // @@protoc_insertion_point(class_scope:TCProto.BusColor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::SvgProto::Color* color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// -------------------------------------------------------------------

class MapRenderer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TCProto.MapRenderer) */ {
 public:
  inline MapRenderer() : MapRenderer(nullptr) {}
  ~MapRenderer() override;
  explicit constexpr MapRenderer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapRenderer(const MapRenderer& from);
  MapRenderer(MapRenderer&& from) noexcept
    : MapRenderer() {
    *this = ::std::move(from);
  }

  inline MapRenderer& operator=(const MapRenderer& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapRenderer& operator=(MapRenderer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapRenderer& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapRenderer* internal_default_instance() {
    return reinterpret_cast<const MapRenderer*>(
               &_MapRenderer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MapRenderer& a, MapRenderer& b) {
    a.Swap(&b);
  }
  inline void Swap(MapRenderer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapRenderer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapRenderer* New() const final {
    return new MapRenderer();
  }

  MapRenderer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapRenderer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapRenderer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapRenderer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapRenderer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TCProto.MapRenderer";
  }
  protected:
  explicit MapRenderer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusColorsFieldNumber = 3,
    kBusDescriptionsFieldNumber = 4,
    kRenderSettingsFieldNumber = 1,
    kPointsMapsFieldNumber = 2,
  };
  // repeated .TCProto.BusColor bus_colors = 3;
  int bus_colors_size() const;
  private:
  int _internal_bus_colors_size() const;
  public:
  void clear_bus_colors();
  ::TCProto::BusColor* mutable_bus_colors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::BusColor >*
      mutable_bus_colors();
  private:
  const ::TCProto::BusColor& _internal_bus_colors(int index) const;
  ::TCProto::BusColor* _internal_add_bus_colors();
  public:
  const ::TCProto::BusColor& bus_colors(int index) const;
  ::TCProto::BusColor* add_bus_colors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::BusColor >&
      bus_colors() const;

  // repeated .TCProto.BusDescription bus_descriptions = 4;
  int bus_descriptions_size() const;
  private:
  int _internal_bus_descriptions_size() const;
  public:
  void clear_bus_descriptions();
  ::TCProto::BusDescription* mutable_bus_descriptions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::BusDescription >*
      mutable_bus_descriptions();
  private:
  const ::TCProto::BusDescription& _internal_bus_descriptions(int index) const;
  ::TCProto::BusDescription* _internal_add_bus_descriptions();
  public:
  const ::TCProto::BusDescription& bus_descriptions(int index) const;
  ::TCProto::BusDescription* add_bus_descriptions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::BusDescription >&
      bus_descriptions() const;

  // .TCProto.RenderSettings render_settings = 1;
  bool has_render_settings() const;
  private:
  bool _internal_has_render_settings() const;
  public:
  void clear_render_settings();
  const ::TCProto::RenderSettings& render_settings() const;
  PROTOBUF_MUST_USE_RESULT ::TCProto::RenderSettings* release_render_settings();
  ::TCProto::RenderSettings* mutable_render_settings();
  void set_allocated_render_settings(::TCProto::RenderSettings* render_settings);
  private:
  const ::TCProto::RenderSettings& _internal_render_settings() const;
  ::TCProto::RenderSettings* _internal_mutable_render_settings();
  public:
  void unsafe_arena_set_allocated_render_settings(
      ::TCProto::RenderSettings* render_settings);
  ::TCProto::RenderSettings* unsafe_arena_release_render_settings();

  // .TCProto.PointsMaps points_maps = 2;
  bool has_points_maps() const;
  private:
  bool _internal_has_points_maps() const;
  public:
  void clear_points_maps();
  const ::TCProto::PointsMaps& points_maps() const;
  PROTOBUF_MUST_USE_RESULT ::TCProto::PointsMaps* release_points_maps();
  ::TCProto::PointsMaps* mutable_points_maps();
  void set_allocated_points_maps(::TCProto::PointsMaps* points_maps);
  private:
  const ::TCProto::PointsMaps& _internal_points_maps() const;
  ::TCProto::PointsMaps* _internal_mutable_points_maps();
  public:
  void unsafe_arena_set_allocated_points_maps(
      ::TCProto::PointsMaps* points_maps);
  ::TCProto::PointsMaps* unsafe_arena_release_points_maps();

  // @@protoc_insertion_point(class_scope:TCProto.MapRenderer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::BusColor > bus_colors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::BusDescription > bus_descriptions_;
  ::TCProto::RenderSettings* render_settings_;
  ::TCProto::PointsMaps* points_maps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_map_5frenderer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RenderSettings

// double max_width = 1;
inline void RenderSettings::clear_max_width() {
  max_width_ = 0;
}
inline double RenderSettings::_internal_max_width() const {
  return max_width_;
}
inline double RenderSettings::max_width() const {
  // @@protoc_insertion_point(field_get:TCProto.RenderSettings.max_width)
  return _internal_max_width();
}
inline void RenderSettings::_internal_set_max_width(double value) {
  
  max_width_ = value;
}
inline void RenderSettings::set_max_width(double value) {
  _internal_set_max_width(value);
  // @@protoc_insertion_point(field_set:TCProto.RenderSettings.max_width)
}

// double max_height = 2;
inline void RenderSettings::clear_max_height() {
  max_height_ = 0;
}
inline double RenderSettings::_internal_max_height() const {
  return max_height_;
}
inline double RenderSettings::max_height() const {
  // @@protoc_insertion_point(field_get:TCProto.RenderSettings.max_height)
  return _internal_max_height();
}
inline void RenderSettings::_internal_set_max_height(double value) {
  
  max_height_ = value;
}
inline void RenderSettings::set_max_height(double value) {
  _internal_set_max_height(value);
  // @@protoc_insertion_point(field_set:TCProto.RenderSettings.max_height)
}

// double padding = 3;
inline void RenderSettings::clear_padding() {
  padding_ = 0;
}
inline double RenderSettings::_internal_padding() const {
  return padding_;
}
inline double RenderSettings::padding() const {
  // @@protoc_insertion_point(field_get:TCProto.RenderSettings.padding)
  return _internal_padding();
}
inline void RenderSettings::_internal_set_padding(double value) {
  
  padding_ = value;
}
inline void RenderSettings::set_padding(double value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:TCProto.RenderSettings.padding)
}

// double outer_margin = 4;
inline void RenderSettings::clear_outer_margin() {
  outer_margin_ = 0;
}
inline double RenderSettings::_internal_outer_margin() const {
  return outer_margin_;
}
inline double RenderSettings::outer_margin() const {
  // @@protoc_insertion_point(field_get:TCProto.RenderSettings.outer_margin)
  return _internal_outer_margin();
}
inline void RenderSettings::_internal_set_outer_margin(double value) {
  
  outer_margin_ = value;
}
inline void RenderSettings::set_outer_margin(double value) {
  _internal_set_outer_margin(value);
  // @@protoc_insertion_point(field_set:TCProto.RenderSettings.outer_margin)
}

// repeated .SvgProto.Color palette = 5;
inline int RenderSettings::_internal_palette_size() const {
  return palette_.size();
}
inline int RenderSettings::palette_size() const {
  return _internal_palette_size();
}
inline ::SvgProto::Color* RenderSettings::mutable_palette(int index) {
  // @@protoc_insertion_point(field_mutable:TCProto.RenderSettings.palette)
  return palette_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SvgProto::Color >*
RenderSettings::mutable_palette() {
  // @@protoc_insertion_point(field_mutable_list:TCProto.RenderSettings.palette)
  return &palette_;
}
inline const ::SvgProto::Color& RenderSettings::_internal_palette(int index) const {
  return palette_.Get(index);
}
inline const ::SvgProto::Color& RenderSettings::palette(int index) const {
  // @@protoc_insertion_point(field_get:TCProto.RenderSettings.palette)
  return _internal_palette(index);
}
inline ::SvgProto::Color* RenderSettings::_internal_add_palette() {
  return palette_.Add();
}
inline ::SvgProto::Color* RenderSettings::add_palette() {
  ::SvgProto::Color* _add = _internal_add_palette();
  // @@protoc_insertion_point(field_add:TCProto.RenderSettings.palette)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SvgProto::Color >&
RenderSettings::palette() const {
  // @@protoc_insertion_point(field_list:TCProto.RenderSettings.palette)
  return palette_;
}

// double line_width = 6;
inline void RenderSettings::clear_line_width() {
  line_width_ = 0;
}
inline double RenderSettings::_internal_line_width() const {
  return line_width_;
}
inline double RenderSettings::line_width() const {
  // @@protoc_insertion_point(field_get:TCProto.RenderSettings.line_width)
  return _internal_line_width();
}
inline void RenderSettings::_internal_set_line_width(double value) {
  
  line_width_ = value;
}
inline void RenderSettings::set_line_width(double value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:TCProto.RenderSettings.line_width)
}

// double company_line_width = 15;
inline void RenderSettings::clear_company_line_width() {
  company_line_width_ = 0;
}
inline double RenderSettings::_internal_company_line_width() const {
  return company_line_width_;
}
inline double RenderSettings::company_line_width() const {
  // @@protoc_insertion_point(field_get:TCProto.RenderSettings.company_line_width)
  return _internal_company_line_width();
}
inline void RenderSettings::_internal_set_company_line_width(double value) {
  
  company_line_width_ = value;
}
inline void RenderSettings::set_company_line_width(double value) {
  _internal_set_company_line_width(value);
  // @@protoc_insertion_point(field_set:TCProto.RenderSettings.company_line_width)
}

// .SvgProto.Color underlayer_color = 7;
inline bool RenderSettings::_internal_has_underlayer_color() const {
  return this != internal_default_instance() && underlayer_color_ != nullptr;
}
inline bool RenderSettings::has_underlayer_color() const {
  return _internal_has_underlayer_color();
}
inline const ::SvgProto::Color& RenderSettings::_internal_underlayer_color() const {
  const ::SvgProto::Color* p = underlayer_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::SvgProto::Color&>(
      ::SvgProto::_Color_default_instance_);
}
inline const ::SvgProto::Color& RenderSettings::underlayer_color() const {
  // @@protoc_insertion_point(field_get:TCProto.RenderSettings.underlayer_color)
  return _internal_underlayer_color();
}
inline void RenderSettings::unsafe_arena_set_allocated_underlayer_color(
    ::SvgProto::Color* underlayer_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayer_color_);
  }
  underlayer_color_ = underlayer_color;
  if (underlayer_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.RenderSettings.underlayer_color)
}
inline ::SvgProto::Color* RenderSettings::release_underlayer_color() {
  
  ::SvgProto::Color* temp = underlayer_color_;
  underlayer_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SvgProto::Color* RenderSettings::unsafe_arena_release_underlayer_color() {
  // @@protoc_insertion_point(field_release:TCProto.RenderSettings.underlayer_color)
  
  ::SvgProto::Color* temp = underlayer_color_;
  underlayer_color_ = nullptr;
  return temp;
}
inline ::SvgProto::Color* RenderSettings::_internal_mutable_underlayer_color() {
  
  if (underlayer_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::SvgProto::Color>(GetArenaForAllocation());
    underlayer_color_ = p;
  }
  return underlayer_color_;
}
inline ::SvgProto::Color* RenderSettings::mutable_underlayer_color() {
  ::SvgProto::Color* _msg = _internal_mutable_underlayer_color();
  // @@protoc_insertion_point(field_mutable:TCProto.RenderSettings.underlayer_color)
  return _msg;
}
inline void RenderSettings::set_allocated_underlayer_color(::SvgProto::Color* underlayer_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayer_color_);
  }
  if (underlayer_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayer_color));
    if (message_arena != submessage_arena) {
      underlayer_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlayer_color, submessage_arena);
    }
    
  } else {
    
  }
  underlayer_color_ = underlayer_color;
  // @@protoc_insertion_point(field_set_allocated:TCProto.RenderSettings.underlayer_color)
}

// double underlayer_width = 8;
inline void RenderSettings::clear_underlayer_width() {
  underlayer_width_ = 0;
}
inline double RenderSettings::_internal_underlayer_width() const {
  return underlayer_width_;
}
inline double RenderSettings::underlayer_width() const {
  // @@protoc_insertion_point(field_get:TCProto.RenderSettings.underlayer_width)
  return _internal_underlayer_width();
}
inline void RenderSettings::_internal_set_underlayer_width(double value) {
  
  underlayer_width_ = value;
}
inline void RenderSettings::set_underlayer_width(double value) {
  _internal_set_underlayer_width(value);
  // @@protoc_insertion_point(field_set:TCProto.RenderSettings.underlayer_width)
}

// double stop_radius = 9;
inline void RenderSettings::clear_stop_radius() {
  stop_radius_ = 0;
}
inline double RenderSettings::_internal_stop_radius() const {
  return stop_radius_;
}
inline double RenderSettings::stop_radius() const {
  // @@protoc_insertion_point(field_get:TCProto.RenderSettings.stop_radius)
  return _internal_stop_radius();
}
inline void RenderSettings::_internal_set_stop_radius(double value) {
  
  stop_radius_ = value;
}
inline void RenderSettings::set_stop_radius(double value) {
  _internal_set_stop_radius(value);
  // @@protoc_insertion_point(field_set:TCProto.RenderSettings.stop_radius)
}

// double company_radius = 16;
inline void RenderSettings::clear_company_radius() {
  company_radius_ = 0;
}
inline double RenderSettings::_internal_company_radius() const {
  return company_radius_;
}
inline double RenderSettings::company_radius() const {
  // @@protoc_insertion_point(field_get:TCProto.RenderSettings.company_radius)
  return _internal_company_radius();
}
inline void RenderSettings::_internal_set_company_radius(double value) {
  
  company_radius_ = value;
}
inline void RenderSettings::set_company_radius(double value) {
  _internal_set_company_radius(value);
  // @@protoc_insertion_point(field_set:TCProto.RenderSettings.company_radius)
}

// .SvgProto.Point bus_label_offset = 10;
inline bool RenderSettings::_internal_has_bus_label_offset() const {
  return this != internal_default_instance() && bus_label_offset_ != nullptr;
}
inline bool RenderSettings::has_bus_label_offset() const {
  return _internal_has_bus_label_offset();
}
inline const ::SvgProto::Point& RenderSettings::_internal_bus_label_offset() const {
  const ::SvgProto::Point* p = bus_label_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::SvgProto::Point&>(
      ::SvgProto::_Point_default_instance_);
}
inline const ::SvgProto::Point& RenderSettings::bus_label_offset() const {
  // @@protoc_insertion_point(field_get:TCProto.RenderSettings.bus_label_offset)
  return _internal_bus_label_offset();
}
inline void RenderSettings::unsafe_arena_set_allocated_bus_label_offset(
    ::SvgProto::Point* bus_label_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bus_label_offset_);
  }
  bus_label_offset_ = bus_label_offset;
  if (bus_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.RenderSettings.bus_label_offset)
}
inline ::SvgProto::Point* RenderSettings::release_bus_label_offset() {
  
  ::SvgProto::Point* temp = bus_label_offset_;
  bus_label_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SvgProto::Point* RenderSettings::unsafe_arena_release_bus_label_offset() {
  // @@protoc_insertion_point(field_release:TCProto.RenderSettings.bus_label_offset)
  
  ::SvgProto::Point* temp = bus_label_offset_;
  bus_label_offset_ = nullptr;
  return temp;
}
inline ::SvgProto::Point* RenderSettings::_internal_mutable_bus_label_offset() {
  
  if (bus_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::SvgProto::Point>(GetArenaForAllocation());
    bus_label_offset_ = p;
  }
  return bus_label_offset_;
}
inline ::SvgProto::Point* RenderSettings::mutable_bus_label_offset() {
  ::SvgProto::Point* _msg = _internal_mutable_bus_label_offset();
  // @@protoc_insertion_point(field_mutable:TCProto.RenderSettings.bus_label_offset)
  return _msg;
}
inline void RenderSettings::set_allocated_bus_label_offset(::SvgProto::Point* bus_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bus_label_offset_);
  }
  if (bus_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bus_label_offset));
    if (message_arena != submessage_arena) {
      bus_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  bus_label_offset_ = bus_label_offset;
  // @@protoc_insertion_point(field_set_allocated:TCProto.RenderSettings.bus_label_offset)
}

// int32 bus_label_font_size = 11;
inline void RenderSettings::clear_bus_label_font_size() {
  bus_label_font_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderSettings::_internal_bus_label_font_size() const {
  return bus_label_font_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderSettings::bus_label_font_size() const {
  // @@protoc_insertion_point(field_get:TCProto.RenderSettings.bus_label_font_size)
  return _internal_bus_label_font_size();
}
inline void RenderSettings::_internal_set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bus_label_font_size_ = value;
}
inline void RenderSettings::set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bus_label_font_size(value);
  // @@protoc_insertion_point(field_set:TCProto.RenderSettings.bus_label_font_size)
}

// .SvgProto.Point stop_label_offset = 12;
inline bool RenderSettings::_internal_has_stop_label_offset() const {
  return this != internal_default_instance() && stop_label_offset_ != nullptr;
}
inline bool RenderSettings::has_stop_label_offset() const {
  return _internal_has_stop_label_offset();
}
inline const ::SvgProto::Point& RenderSettings::_internal_stop_label_offset() const {
  const ::SvgProto::Point* p = stop_label_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::SvgProto::Point&>(
      ::SvgProto::_Point_default_instance_);
}
inline const ::SvgProto::Point& RenderSettings::stop_label_offset() const {
  // @@protoc_insertion_point(field_get:TCProto.RenderSettings.stop_label_offset)
  return _internal_stop_label_offset();
}
inline void RenderSettings::unsafe_arena_set_allocated_stop_label_offset(
    ::SvgProto::Point* stop_label_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_label_offset_);
  }
  stop_label_offset_ = stop_label_offset;
  if (stop_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.RenderSettings.stop_label_offset)
}
inline ::SvgProto::Point* RenderSettings::release_stop_label_offset() {
  
  ::SvgProto::Point* temp = stop_label_offset_;
  stop_label_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SvgProto::Point* RenderSettings::unsafe_arena_release_stop_label_offset() {
  // @@protoc_insertion_point(field_release:TCProto.RenderSettings.stop_label_offset)
  
  ::SvgProto::Point* temp = stop_label_offset_;
  stop_label_offset_ = nullptr;
  return temp;
}
inline ::SvgProto::Point* RenderSettings::_internal_mutable_stop_label_offset() {
  
  if (stop_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::SvgProto::Point>(GetArenaForAllocation());
    stop_label_offset_ = p;
  }
  return stop_label_offset_;
}
inline ::SvgProto::Point* RenderSettings::mutable_stop_label_offset() {
  ::SvgProto::Point* _msg = _internal_mutable_stop_label_offset();
  // @@protoc_insertion_point(field_mutable:TCProto.RenderSettings.stop_label_offset)
  return _msg;
}
inline void RenderSettings::set_allocated_stop_label_offset(::SvgProto::Point* stop_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_label_offset_);
  }
  if (stop_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_label_offset));
    if (message_arena != submessage_arena) {
      stop_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  stop_label_offset_ = stop_label_offset;
  // @@protoc_insertion_point(field_set_allocated:TCProto.RenderSettings.stop_label_offset)
}

// int32 stop_label_font_size = 13;
inline void RenderSettings::clear_stop_label_font_size() {
  stop_label_font_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderSettings::_internal_stop_label_font_size() const {
  return stop_label_font_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RenderSettings::stop_label_font_size() const {
  // @@protoc_insertion_point(field_get:TCProto.RenderSettings.stop_label_font_size)
  return _internal_stop_label_font_size();
}
inline void RenderSettings::_internal_set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stop_label_font_size_ = value;
}
inline void RenderSettings::set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stop_label_font_size(value);
  // @@protoc_insertion_point(field_set:TCProto.RenderSettings.stop_label_font_size)
}

// repeated string layers = 14;
inline int RenderSettings::_internal_layers_size() const {
  return layers_.size();
}
inline int RenderSettings::layers_size() const {
  return _internal_layers_size();
}
inline void RenderSettings::clear_layers() {
  layers_.Clear();
}
inline std::string* RenderSettings::add_layers() {
  std::string* _s = _internal_add_layers();
  // @@protoc_insertion_point(field_add_mutable:TCProto.RenderSettings.layers)
  return _s;
}
inline const std::string& RenderSettings::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const std::string& RenderSettings::layers(int index) const {
  // @@protoc_insertion_point(field_get:TCProto.RenderSettings.layers)
  return _internal_layers(index);
}
inline std::string* RenderSettings::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:TCProto.RenderSettings.layers)
  return layers_.Mutable(index);
}
inline void RenderSettings::set_layers(int index, const std::string& value) {
  layers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TCProto.RenderSettings.layers)
}
inline void RenderSettings::set_layers(int index, std::string&& value) {
  layers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TCProto.RenderSettings.layers)
}
inline void RenderSettings::set_layers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  layers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TCProto.RenderSettings.layers)
}
inline void RenderSettings::set_layers(int index, const char* value, size_t size) {
  layers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TCProto.RenderSettings.layers)
}
inline std::string* RenderSettings::_internal_add_layers() {
  return layers_.Add();
}
inline void RenderSettings::add_layers(const std::string& value) {
  layers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TCProto.RenderSettings.layers)
}
inline void RenderSettings::add_layers(std::string&& value) {
  layers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TCProto.RenderSettings.layers)
}
inline void RenderSettings::add_layers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  layers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TCProto.RenderSettings.layers)
}
inline void RenderSettings::add_layers(const char* value, size_t size) {
  layers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TCProto.RenderSettings.layers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RenderSettings::layers() const {
  // @@protoc_insertion_point(field_list:TCProto.RenderSettings.layers)
  return layers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RenderSettings::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:TCProto.RenderSettings.layers)
  return &layers_;
}

// -------------------------------------------------------------------

// StopCoords

// string name = 1;
inline void StopCoords::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StopCoords::name() const {
  // @@protoc_insertion_point(field_get:TCProto.StopCoords.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopCoords::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TCProto.StopCoords.name)
}
inline std::string* StopCoords::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TCProto.StopCoords.name)
  return _s;
}
inline const std::string& StopCoords::_internal_name() const {
  return name_.Get();
}
inline void StopCoords::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StopCoords::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StopCoords::release_name() {
  // @@protoc_insertion_point(field_release:TCProto.StopCoords.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StopCoords::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TCProto.StopCoords.name)
}

// .SvgProto.Point point = 2;
inline bool StopCoords::_internal_has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline bool StopCoords::has_point() const {
  return _internal_has_point();
}
inline const ::SvgProto::Point& StopCoords::_internal_point() const {
  const ::SvgProto::Point* p = point_;
  return p != nullptr ? *p : reinterpret_cast<const ::SvgProto::Point&>(
      ::SvgProto::_Point_default_instance_);
}
inline const ::SvgProto::Point& StopCoords::point() const {
  // @@protoc_insertion_point(field_get:TCProto.StopCoords.point)
  return _internal_point();
}
inline void StopCoords::unsafe_arena_set_allocated_point(
    ::SvgProto::Point* point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.StopCoords.point)
}
inline ::SvgProto::Point* StopCoords::release_point() {
  
  ::SvgProto::Point* temp = point_;
  point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SvgProto::Point* StopCoords::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:TCProto.StopCoords.point)
  
  ::SvgProto::Point* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::SvgProto::Point* StopCoords::_internal_mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::SvgProto::Point>(GetArenaForAllocation());
    point_ = p;
  }
  return point_;
}
inline ::SvgProto::Point* StopCoords::mutable_point() {
  ::SvgProto::Point* _msg = _internal_mutable_point();
  // @@protoc_insertion_point(field_mutable:TCProto.StopCoords.point)
  return _msg;
}
inline void StopCoords::set_allocated_point(::SvgProto::Point* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point));
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:TCProto.StopCoords.point)
}

// -------------------------------------------------------------------

// PointsMaps

// repeated .TCProto.StopCoords stops = 1;
inline int PointsMaps::_internal_stops_size() const {
  return stops_.size();
}
inline int PointsMaps::stops_size() const {
  return _internal_stops_size();
}
inline void PointsMaps::clear_stops() {
  stops_.Clear();
}
inline ::TCProto::StopCoords* PointsMaps::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:TCProto.PointsMaps.stops)
  return stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::StopCoords >*
PointsMaps::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:TCProto.PointsMaps.stops)
  return &stops_;
}
inline const ::TCProto::StopCoords& PointsMaps::_internal_stops(int index) const {
  return stops_.Get(index);
}
inline const ::TCProto::StopCoords& PointsMaps::stops(int index) const {
  // @@protoc_insertion_point(field_get:TCProto.PointsMaps.stops)
  return _internal_stops(index);
}
inline ::TCProto::StopCoords* PointsMaps::_internal_add_stops() {
  return stops_.Add();
}
inline ::TCProto::StopCoords* PointsMaps::add_stops() {
  ::TCProto::StopCoords* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:TCProto.PointsMaps.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::StopCoords >&
PointsMaps::stops() const {
  // @@protoc_insertion_point(field_list:TCProto.PointsMaps.stops)
  return stops_;
}

// repeated .SvgProto.Point companies = 2;
inline int PointsMaps::_internal_companies_size() const {
  return companies_.size();
}
inline int PointsMaps::companies_size() const {
  return _internal_companies_size();
}
inline ::SvgProto::Point* PointsMaps::mutable_companies(int index) {
  // @@protoc_insertion_point(field_mutable:TCProto.PointsMaps.companies)
  return companies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SvgProto::Point >*
PointsMaps::mutable_companies() {
  // @@protoc_insertion_point(field_mutable_list:TCProto.PointsMaps.companies)
  return &companies_;
}
inline const ::SvgProto::Point& PointsMaps::_internal_companies(int index) const {
  return companies_.Get(index);
}
inline const ::SvgProto::Point& PointsMaps::companies(int index) const {
  // @@protoc_insertion_point(field_get:TCProto.PointsMaps.companies)
  return _internal_companies(index);
}
inline ::SvgProto::Point* PointsMaps::_internal_add_companies() {
  return companies_.Add();
}
inline ::SvgProto::Point* PointsMaps::add_companies() {
  ::SvgProto::Point* _add = _internal_add_companies();
  // @@protoc_insertion_point(field_add:TCProto.PointsMaps.companies)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SvgProto::Point >&
PointsMaps::companies() const {
  // @@protoc_insertion_point(field_list:TCProto.PointsMaps.companies)
  return companies_;
}

// -------------------------------------------------------------------

// BusColor

// string name = 1;
inline void BusColor::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BusColor::name() const {
  // @@protoc_insertion_point(field_get:TCProto.BusColor.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BusColor::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TCProto.BusColor.name)
}
inline std::string* BusColor::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TCProto.BusColor.name)
  return _s;
}
inline const std::string& BusColor::_internal_name() const {
  return name_.Get();
}
inline void BusColor::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BusColor::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BusColor::release_name() {
  // @@protoc_insertion_point(field_release:TCProto.BusColor.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BusColor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:TCProto.BusColor.name)
}

// .SvgProto.Color color = 2;
inline bool BusColor::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool BusColor::has_color() const {
  return _internal_has_color();
}
inline const ::SvgProto::Color& BusColor::_internal_color() const {
  const ::SvgProto::Color* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::SvgProto::Color&>(
      ::SvgProto::_Color_default_instance_);
}
inline const ::SvgProto::Color& BusColor::color() const {
  // @@protoc_insertion_point(field_get:TCProto.BusColor.color)
  return _internal_color();
}
inline void BusColor::unsafe_arena_set_allocated_color(
    ::SvgProto::Color* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.BusColor.color)
}
inline ::SvgProto::Color* BusColor::release_color() {
  
  ::SvgProto::Color* temp = color_;
  color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SvgProto::Color* BusColor::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:TCProto.BusColor.color)
  
  ::SvgProto::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::SvgProto::Color* BusColor::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::SvgProto::Color>(GetArenaForAllocation());
    color_ = p;
  }
  return color_;
}
inline ::SvgProto::Color* BusColor::mutable_color() {
  ::SvgProto::Color* _msg = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:TCProto.BusColor.color)
  return _msg;
}
inline void BusColor::set_allocated_color(::SvgProto::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color));
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:TCProto.BusColor.color)
}

// -------------------------------------------------------------------

// MapRenderer

// .TCProto.RenderSettings render_settings = 1;
inline bool MapRenderer::_internal_has_render_settings() const {
  return this != internal_default_instance() && render_settings_ != nullptr;
}
inline bool MapRenderer::has_render_settings() const {
  return _internal_has_render_settings();
}
inline void MapRenderer::clear_render_settings() {
  if (GetArenaForAllocation() == nullptr && render_settings_ != nullptr) {
    delete render_settings_;
  }
  render_settings_ = nullptr;
}
inline const ::TCProto::RenderSettings& MapRenderer::_internal_render_settings() const {
  const ::TCProto::RenderSettings* p = render_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::TCProto::RenderSettings&>(
      ::TCProto::_RenderSettings_default_instance_);
}
inline const ::TCProto::RenderSettings& MapRenderer::render_settings() const {
  // @@protoc_insertion_point(field_get:TCProto.MapRenderer.render_settings)
  return _internal_render_settings();
}
inline void MapRenderer::unsafe_arena_set_allocated_render_settings(
    ::TCProto::RenderSettings* render_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_settings_);
  }
  render_settings_ = render_settings;
  if (render_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.MapRenderer.render_settings)
}
inline ::TCProto::RenderSettings* MapRenderer::release_render_settings() {
  
  ::TCProto::RenderSettings* temp = render_settings_;
  render_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TCProto::RenderSettings* MapRenderer::unsafe_arena_release_render_settings() {
  // @@protoc_insertion_point(field_release:TCProto.MapRenderer.render_settings)
  
  ::TCProto::RenderSettings* temp = render_settings_;
  render_settings_ = nullptr;
  return temp;
}
inline ::TCProto::RenderSettings* MapRenderer::_internal_mutable_render_settings() {
  
  if (render_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::TCProto::RenderSettings>(GetArenaForAllocation());
    render_settings_ = p;
  }
  return render_settings_;
}
inline ::TCProto::RenderSettings* MapRenderer::mutable_render_settings() {
  ::TCProto::RenderSettings* _msg = _internal_mutable_render_settings();
  // @@protoc_insertion_point(field_mutable:TCProto.MapRenderer.render_settings)
  return _msg;
}
inline void MapRenderer::set_allocated_render_settings(::TCProto::RenderSettings* render_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete render_settings_;
  }
  if (render_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TCProto::RenderSettings>::GetOwningArena(render_settings);
    if (message_arena != submessage_arena) {
      render_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, render_settings, submessage_arena);
    }
    
  } else {
    
  }
  render_settings_ = render_settings;
  // @@protoc_insertion_point(field_set_allocated:TCProto.MapRenderer.render_settings)
}

// .TCProto.PointsMaps points_maps = 2;
inline bool MapRenderer::_internal_has_points_maps() const {
  return this != internal_default_instance() && points_maps_ != nullptr;
}
inline bool MapRenderer::has_points_maps() const {
  return _internal_has_points_maps();
}
inline void MapRenderer::clear_points_maps() {
  if (GetArenaForAllocation() == nullptr && points_maps_ != nullptr) {
    delete points_maps_;
  }
  points_maps_ = nullptr;
}
inline const ::TCProto::PointsMaps& MapRenderer::_internal_points_maps() const {
  const ::TCProto::PointsMaps* p = points_maps_;
  return p != nullptr ? *p : reinterpret_cast<const ::TCProto::PointsMaps&>(
      ::TCProto::_PointsMaps_default_instance_);
}
inline const ::TCProto::PointsMaps& MapRenderer::points_maps() const {
  // @@protoc_insertion_point(field_get:TCProto.MapRenderer.points_maps)
  return _internal_points_maps();
}
inline void MapRenderer::unsafe_arena_set_allocated_points_maps(
    ::TCProto::PointsMaps* points_maps) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(points_maps_);
  }
  points_maps_ = points_maps;
  if (points_maps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TCProto.MapRenderer.points_maps)
}
inline ::TCProto::PointsMaps* MapRenderer::release_points_maps() {
  
  ::TCProto::PointsMaps* temp = points_maps_;
  points_maps_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TCProto::PointsMaps* MapRenderer::unsafe_arena_release_points_maps() {
  // @@protoc_insertion_point(field_release:TCProto.MapRenderer.points_maps)
  
  ::TCProto::PointsMaps* temp = points_maps_;
  points_maps_ = nullptr;
  return temp;
}
inline ::TCProto::PointsMaps* MapRenderer::_internal_mutable_points_maps() {
  
  if (points_maps_ == nullptr) {
    auto* p = CreateMaybeMessage<::TCProto::PointsMaps>(GetArenaForAllocation());
    points_maps_ = p;
  }
  return points_maps_;
}
inline ::TCProto::PointsMaps* MapRenderer::mutable_points_maps() {
  ::TCProto::PointsMaps* _msg = _internal_mutable_points_maps();
  // @@protoc_insertion_point(field_mutable:TCProto.MapRenderer.points_maps)
  return _msg;
}
inline void MapRenderer::set_allocated_points_maps(::TCProto::PointsMaps* points_maps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete points_maps_;
  }
  if (points_maps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::TCProto::PointsMaps>::GetOwningArena(points_maps);
    if (message_arena != submessage_arena) {
      points_maps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, points_maps, submessage_arena);
    }
    
  } else {
    
  }
  points_maps_ = points_maps;
  // @@protoc_insertion_point(field_set_allocated:TCProto.MapRenderer.points_maps)
}

// repeated .TCProto.BusColor bus_colors = 3;
inline int MapRenderer::_internal_bus_colors_size() const {
  return bus_colors_.size();
}
inline int MapRenderer::bus_colors_size() const {
  return _internal_bus_colors_size();
}
inline void MapRenderer::clear_bus_colors() {
  bus_colors_.Clear();
}
inline ::TCProto::BusColor* MapRenderer::mutable_bus_colors(int index) {
  // @@protoc_insertion_point(field_mutable:TCProto.MapRenderer.bus_colors)
  return bus_colors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::BusColor >*
MapRenderer::mutable_bus_colors() {
  // @@protoc_insertion_point(field_mutable_list:TCProto.MapRenderer.bus_colors)
  return &bus_colors_;
}
inline const ::TCProto::BusColor& MapRenderer::_internal_bus_colors(int index) const {
  return bus_colors_.Get(index);
}
inline const ::TCProto::BusColor& MapRenderer::bus_colors(int index) const {
  // @@protoc_insertion_point(field_get:TCProto.MapRenderer.bus_colors)
  return _internal_bus_colors(index);
}
inline ::TCProto::BusColor* MapRenderer::_internal_add_bus_colors() {
  return bus_colors_.Add();
}
inline ::TCProto::BusColor* MapRenderer::add_bus_colors() {
  ::TCProto::BusColor* _add = _internal_add_bus_colors();
  // @@protoc_insertion_point(field_add:TCProto.MapRenderer.bus_colors)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::BusColor >&
MapRenderer::bus_colors() const {
  // @@protoc_insertion_point(field_list:TCProto.MapRenderer.bus_colors)
  return bus_colors_;
}

// repeated .TCProto.BusDescription bus_descriptions = 4;
inline int MapRenderer::_internal_bus_descriptions_size() const {
  return bus_descriptions_.size();
}
inline int MapRenderer::bus_descriptions_size() const {
  return _internal_bus_descriptions_size();
}
inline ::TCProto::BusDescription* MapRenderer::mutable_bus_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:TCProto.MapRenderer.bus_descriptions)
  return bus_descriptions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::BusDescription >*
MapRenderer::mutable_bus_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:TCProto.MapRenderer.bus_descriptions)
  return &bus_descriptions_;
}
inline const ::TCProto::BusDescription& MapRenderer::_internal_bus_descriptions(int index) const {
  return bus_descriptions_.Get(index);
}
inline const ::TCProto::BusDescription& MapRenderer::bus_descriptions(int index) const {
  // @@protoc_insertion_point(field_get:TCProto.MapRenderer.bus_descriptions)
  return _internal_bus_descriptions(index);
}
inline ::TCProto::BusDescription* MapRenderer::_internal_add_bus_descriptions() {
  return bus_descriptions_.Add();
}
inline ::TCProto::BusDescription* MapRenderer::add_bus_descriptions() {
  ::TCProto::BusDescription* _add = _internal_add_bus_descriptions();
  // @@protoc_insertion_point(field_add:TCProto.MapRenderer.bus_descriptions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TCProto::BusDescription >&
MapRenderer::bus_descriptions() const {
  // @@protoc_insertion_point(field_list:TCProto.MapRenderer.bus_descriptions)
  return bus_descriptions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TCProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_map_5frenderer_2eproto
