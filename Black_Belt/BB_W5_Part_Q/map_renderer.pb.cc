// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map_renderer.proto

#include "map_renderer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TCProto {
constexpr RenderSettings::RenderSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : palette_()
  , layers_()
  , underlayer_color_(nullptr)
  , bus_label_offset_(nullptr)
  , stop_label_offset_(nullptr)
  , max_width_(0)
  , max_height_(0)
  , padding_(0)
  , outer_margin_(0)
  , line_width_(0)
  , underlayer_width_(0)
  , stop_radius_(0)
  , bus_label_font_size_(0)
  , stop_label_font_size_(0)
  , company_line_width_(0)
  , company_radius_(0){}
struct RenderSettingsDefaultTypeInternal {
  constexpr RenderSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RenderSettingsDefaultTypeInternal() {}
  union {
    RenderSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RenderSettingsDefaultTypeInternal _RenderSettings_default_instance_;
constexpr StopCoords::StopCoords(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , point_(nullptr){}
struct StopCoordsDefaultTypeInternal {
  constexpr StopCoordsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopCoordsDefaultTypeInternal() {}
  union {
    StopCoords _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopCoordsDefaultTypeInternal _StopCoords_default_instance_;
constexpr BusColor::BusColor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(nullptr){}
struct BusColorDefaultTypeInternal {
  constexpr BusColorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BusColorDefaultTypeInternal() {}
  union {
    BusColor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BusColorDefaultTypeInternal _BusColor_default_instance_;
constexpr MapRenderer::MapRenderer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stops_coords_()
  , bus_colors_()
  , bus_descriptions_()
  , render_settings_(nullptr){}
struct MapRendererDefaultTypeInternal {
  constexpr MapRendererDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MapRendererDefaultTypeInternal() {}
  union {
    MapRenderer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MapRendererDefaultTypeInternal _MapRenderer_default_instance_;
}  // namespace TCProto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_map_5frenderer_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_map_5frenderer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_map_5frenderer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_map_5frenderer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, max_width_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, max_height_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, padding_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, outer_margin_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, palette_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, line_width_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, company_line_width_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, underlayer_color_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, underlayer_width_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, stop_radius_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, company_radius_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, bus_label_offset_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, bus_label_font_size_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, stop_label_offset_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, stop_label_font_size_),
  PROTOBUF_FIELD_OFFSET(::TCProto::RenderSettings, layers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TCProto::StopCoords, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TCProto::StopCoords, name_),
  PROTOBUF_FIELD_OFFSET(::TCProto::StopCoords, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TCProto::BusColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TCProto::BusColor, name_),
  PROTOBUF_FIELD_OFFSET(::TCProto::BusColor, color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TCProto::MapRenderer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TCProto::MapRenderer, render_settings_),
  PROTOBUF_FIELD_OFFSET(::TCProto::MapRenderer, stops_coords_),
  PROTOBUF_FIELD_OFFSET(::TCProto::MapRenderer, bus_colors_),
  PROTOBUF_FIELD_OFFSET(::TCProto::MapRenderer, bus_descriptions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::TCProto::RenderSettings)},
  { 21, -1, sizeof(::TCProto::StopCoords)},
  { 28, -1, sizeof(::TCProto::BusColor)},
  { 35, -1, sizeof(::TCProto::MapRenderer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TCProto::_RenderSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TCProto::_StopCoords_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TCProto::_BusColor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TCProto::_MapRenderer_default_instance_),
};

const char descriptor_table_protodef_map_5frenderer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022map_renderer.proto\022\007TCProto\032\022descripti"
  "ons.proto\032\tsvg.proto\"\304\003\n\016RenderSettings\022"
  "\021\n\tmax_width\030\001 \001(\001\022\022\n\nmax_height\030\002 \001(\001\022\017"
  "\n\007padding\030\003 \001(\001\022\024\n\014outer_margin\030\004 \001(\001\022 \n"
  "\007palette\030\005 \003(\0132\017.SvgProto.Color\022\022\n\nline_"
  "width\030\006 \001(\001\022\032\n\022company_line_width\030\017 \001(\001\022"
  ")\n\020underlayer_color\030\007 \001(\0132\017.SvgProto.Col"
  "or\022\030\n\020underlayer_width\030\010 \001(\001\022\023\n\013stop_rad"
  "ius\030\t \001(\001\022\026\n\016company_radius\030\020 \001(\001\022)\n\020bus"
  "_label_offset\030\n \001(\0132\017.SvgProto.Point\022\033\n\023"
  "bus_label_font_size\030\013 \001(\005\022*\n\021stop_label_"
  "offset\030\014 \001(\0132\017.SvgProto.Point\022\034\n\024stop_la"
  "bel_font_size\030\r \001(\005\022\016\n\006layers\030\016 \003(\t\":\n\nS"
  "topCoords\022\014\n\004name\030\001 \001(\t\022\036\n\005point\030\002 \001(\0132\017"
  ".SvgProto.Point\"8\n\010BusColor\022\014\n\004name\030\001 \001("
  "\t\022\036\n\005color\030\002 \001(\0132\017.SvgProto.Color\"\304\001\n\013Ma"
  "pRenderer\0220\n\017render_settings\030\001 \001(\0132\027.TCP"
  "roto.RenderSettings\022)\n\014stops_coords\030\002 \003("
  "\0132\023.TCProto.StopCoords\022%\n\nbus_colors\030\003 \003"
  "(\0132\021.TCProto.BusColor\0221\n\020bus_description"
  "s\030\004 \003(\0132\027.TCProto.BusDescriptionb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_map_5frenderer_2eproto_deps[2] = {
  &::descriptor_table_descriptions_2eproto,
  &::descriptor_table_svg_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_map_5frenderer_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_map_5frenderer_2eproto = {
  false, false, 840, descriptor_table_protodef_map_5frenderer_2eproto, "map_renderer.proto", 
  &descriptor_table_map_5frenderer_2eproto_once, descriptor_table_map_5frenderer_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_map_5frenderer_2eproto::offsets,
  file_level_metadata_map_5frenderer_2eproto, file_level_enum_descriptors_map_5frenderer_2eproto, file_level_service_descriptors_map_5frenderer_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_map_5frenderer_2eproto_getter() {
  return &descriptor_table_map_5frenderer_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_map_5frenderer_2eproto(&descriptor_table_map_5frenderer_2eproto);
namespace TCProto {

// ===================================================================

class RenderSettings::_Internal {
 public:
  static const ::SvgProto::Color& underlayer_color(const RenderSettings* msg);
  static const ::SvgProto::Point& bus_label_offset(const RenderSettings* msg);
  static const ::SvgProto::Point& stop_label_offset(const RenderSettings* msg);
};

const ::SvgProto::Color&
RenderSettings::_Internal::underlayer_color(const RenderSettings* msg) {
  return *msg->underlayer_color_;
}
const ::SvgProto::Point&
RenderSettings::_Internal::bus_label_offset(const RenderSettings* msg) {
  return *msg->bus_label_offset_;
}
const ::SvgProto::Point&
RenderSettings::_Internal::stop_label_offset(const RenderSettings* msg) {
  return *msg->stop_label_offset_;
}
void RenderSettings::clear_palette() {
  palette_.Clear();
}
void RenderSettings::clear_underlayer_color() {
  if (GetArenaForAllocation() == nullptr && underlayer_color_ != nullptr) {
    delete underlayer_color_;
  }
  underlayer_color_ = nullptr;
}
void RenderSettings::clear_bus_label_offset() {
  if (GetArenaForAllocation() == nullptr && bus_label_offset_ != nullptr) {
    delete bus_label_offset_;
  }
  bus_label_offset_ = nullptr;
}
void RenderSettings::clear_stop_label_offset() {
  if (GetArenaForAllocation() == nullptr && stop_label_offset_ != nullptr) {
    delete stop_label_offset_;
  }
  stop_label_offset_ = nullptr;
}
RenderSettings::RenderSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  palette_(arena),
  layers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TCProto.RenderSettings)
}
RenderSettings::RenderSettings(const RenderSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      palette_(from.palette_),
      layers_(from.layers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_underlayer_color()) {
    underlayer_color_ = new ::SvgProto::Color(*from.underlayer_color_);
  } else {
    underlayer_color_ = nullptr;
  }
  if (from._internal_has_bus_label_offset()) {
    bus_label_offset_ = new ::SvgProto::Point(*from.bus_label_offset_);
  } else {
    bus_label_offset_ = nullptr;
  }
  if (from._internal_has_stop_label_offset()) {
    stop_label_offset_ = new ::SvgProto::Point(*from.stop_label_offset_);
  } else {
    stop_label_offset_ = nullptr;
  }
  ::memcpy(&max_width_, &from.max_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&company_radius_) -
    reinterpret_cast<char*>(&max_width_)) + sizeof(company_radius_));
  // @@protoc_insertion_point(copy_constructor:TCProto.RenderSettings)
}

inline void RenderSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&underlayer_color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&company_radius_) -
    reinterpret_cast<char*>(&underlayer_color_)) + sizeof(company_radius_));
}

RenderSettings::~RenderSettings() {
  // @@protoc_insertion_point(destructor:TCProto.RenderSettings)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RenderSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete underlayer_color_;
  if (this != internal_default_instance()) delete bus_label_offset_;
  if (this != internal_default_instance()) delete stop_label_offset_;
}

void RenderSettings::ArenaDtor(void* object) {
  RenderSettings* _this = reinterpret_cast< RenderSettings* >(object);
  (void)_this;
}
void RenderSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenderSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RenderSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:TCProto.RenderSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  palette_.Clear();
  layers_.Clear();
  if (GetArenaForAllocation() == nullptr && underlayer_color_ != nullptr) {
    delete underlayer_color_;
  }
  underlayer_color_ = nullptr;
  if (GetArenaForAllocation() == nullptr && bus_label_offset_ != nullptr) {
    delete bus_label_offset_;
  }
  bus_label_offset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stop_label_offset_ != nullptr) {
    delete stop_label_offset_;
  }
  stop_label_offset_ = nullptr;
  ::memset(&max_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&company_radius_) -
      reinterpret_cast<char*>(&max_width_)) + sizeof(company_radius_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenderSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double max_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          max_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          max_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double padding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double outer_margin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          outer_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .SvgProto.Color palette = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_palette(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // double line_width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          line_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .SvgProto.Color underlayer_color = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlayer_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double underlayer_width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          underlayer_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stop_radius = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          stop_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .SvgProto.Point bus_label_offset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_bus_label_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bus_label_font_size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          bus_label_font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SvgProto.Point stop_label_offset = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_label_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stop_label_font_size = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          stop_label_font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string layers = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_layers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TCProto.RenderSettings.layers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // double company_line_width = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          company_line_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double company_radius = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          company_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenderSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TCProto.RenderSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_width = 1;
  if (!(this->_internal_max_width() <= 0 && this->_internal_max_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_width(), target);
  }

  // double max_height = 2;
  if (!(this->_internal_max_height() <= 0 && this->_internal_max_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_height(), target);
  }

  // double padding = 3;
  if (!(this->_internal_padding() <= 0 && this->_internal_padding() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_padding(), target);
  }

  // double outer_margin = 4;
  if (!(this->_internal_outer_margin() <= 0 && this->_internal_outer_margin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_outer_margin(), target);
  }

  // repeated .SvgProto.Color palette = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_palette_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_palette(i), target, stream);
  }

  // double line_width = 6;
  if (!(this->_internal_line_width() <= 0 && this->_internal_line_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_line_width(), target);
  }

  // .SvgProto.Color underlayer_color = 7;
  if (this->_internal_has_underlayer_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::underlayer_color(this), target, stream);
  }

  // double underlayer_width = 8;
  if (!(this->_internal_underlayer_width() <= 0 && this->_internal_underlayer_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_underlayer_width(), target);
  }

  // double stop_radius = 9;
  if (!(this->_internal_stop_radius() <= 0 && this->_internal_stop_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_stop_radius(), target);
  }

  // .SvgProto.Point bus_label_offset = 10;
  if (this->_internal_has_bus_label_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::bus_label_offset(this), target, stream);
  }

  // int32 bus_label_font_size = 11;
  if (this->_internal_bus_label_font_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_bus_label_font_size(), target);
  }

  // .SvgProto.Point stop_label_offset = 12;
  if (this->_internal_has_stop_label_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::stop_label_offset(this), target, stream);
  }

  // int32 stop_label_font_size = 13;
  if (this->_internal_stop_label_font_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_stop_label_font_size(), target);
  }

  // repeated string layers = 14;
  for (int i = 0, n = this->_internal_layers_size(); i < n; i++) {
    const auto& s = this->_internal_layers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TCProto.RenderSettings.layers");
    target = stream->WriteString(14, s, target);
  }

  // double company_line_width = 15;
  if (!(this->_internal_company_line_width() <= 0 && this->_internal_company_line_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_company_line_width(), target);
  }

  // double company_radius = 16;
  if (!(this->_internal_company_radius() <= 0 && this->_internal_company_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_company_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TCProto.RenderSettings)
  return target;
}

size_t RenderSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TCProto.RenderSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SvgProto.Color palette = 5;
  total_size += 1UL * this->_internal_palette_size();
  for (const auto& msg : this->palette_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string layers = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(layers_.size());
  for (int i = 0, n = layers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      layers_.Get(i));
  }

  // .SvgProto.Color underlayer_color = 7;
  if (this->_internal_has_underlayer_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *underlayer_color_);
  }

  // .SvgProto.Point bus_label_offset = 10;
  if (this->_internal_has_bus_label_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bus_label_offset_);
  }

  // .SvgProto.Point stop_label_offset = 12;
  if (this->_internal_has_stop_label_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stop_label_offset_);
  }

  // double max_width = 1;
  if (!(this->_internal_max_width() <= 0 && this->_internal_max_width() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_height = 2;
  if (!(this->_internal_max_height() <= 0 && this->_internal_max_height() >= 0)) {
    total_size += 1 + 8;
  }

  // double padding = 3;
  if (!(this->_internal_padding() <= 0 && this->_internal_padding() >= 0)) {
    total_size += 1 + 8;
  }

  // double outer_margin = 4;
  if (!(this->_internal_outer_margin() <= 0 && this->_internal_outer_margin() >= 0)) {
    total_size += 1 + 8;
  }

  // double line_width = 6;
  if (!(this->_internal_line_width() <= 0 && this->_internal_line_width() >= 0)) {
    total_size += 1 + 8;
  }

  // double underlayer_width = 8;
  if (!(this->_internal_underlayer_width() <= 0 && this->_internal_underlayer_width() >= 0)) {
    total_size += 1 + 8;
  }

  // double stop_radius = 9;
  if (!(this->_internal_stop_radius() <= 0 && this->_internal_stop_radius() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 bus_label_font_size = 11;
  if (this->_internal_bus_label_font_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bus_label_font_size());
  }

  // int32 stop_label_font_size = 13;
  if (this->_internal_stop_label_font_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stop_label_font_size());
  }

  // double company_line_width = 15;
  if (!(this->_internal_company_line_width() <= 0 && this->_internal_company_line_width() >= 0)) {
    total_size += 1 + 8;
  }

  // double company_radius = 16;
  if (!(this->_internal_company_radius() <= 0 && this->_internal_company_radius() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenderSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RenderSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenderSettings::GetClassData() const { return &_class_data_; }

void RenderSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RenderSettings *>(to)->MergeFrom(
      static_cast<const RenderSettings &>(from));
}


void RenderSettings::MergeFrom(const RenderSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TCProto.RenderSettings)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  palette_.MergeFrom(from.palette_);
  layers_.MergeFrom(from.layers_);
  if (from._internal_has_underlayer_color()) {
    _internal_mutable_underlayer_color()->::SvgProto::Color::MergeFrom(from._internal_underlayer_color());
  }
  if (from._internal_has_bus_label_offset()) {
    _internal_mutable_bus_label_offset()->::SvgProto::Point::MergeFrom(from._internal_bus_label_offset());
  }
  if (from._internal_has_stop_label_offset()) {
    _internal_mutable_stop_label_offset()->::SvgProto::Point::MergeFrom(from._internal_stop_label_offset());
  }
  if (!(from._internal_max_width() <= 0 && from._internal_max_width() >= 0)) {
    _internal_set_max_width(from._internal_max_width());
  }
  if (!(from._internal_max_height() <= 0 && from._internal_max_height() >= 0)) {
    _internal_set_max_height(from._internal_max_height());
  }
  if (!(from._internal_padding() <= 0 && from._internal_padding() >= 0)) {
    _internal_set_padding(from._internal_padding());
  }
  if (!(from._internal_outer_margin() <= 0 && from._internal_outer_margin() >= 0)) {
    _internal_set_outer_margin(from._internal_outer_margin());
  }
  if (!(from._internal_line_width() <= 0 && from._internal_line_width() >= 0)) {
    _internal_set_line_width(from._internal_line_width());
  }
  if (!(from._internal_underlayer_width() <= 0 && from._internal_underlayer_width() >= 0)) {
    _internal_set_underlayer_width(from._internal_underlayer_width());
  }
  if (!(from._internal_stop_radius() <= 0 && from._internal_stop_radius() >= 0)) {
    _internal_set_stop_radius(from._internal_stop_radius());
  }
  if (from._internal_bus_label_font_size() != 0) {
    _internal_set_bus_label_font_size(from._internal_bus_label_font_size());
  }
  if (from._internal_stop_label_font_size() != 0) {
    _internal_set_stop_label_font_size(from._internal_stop_label_font_size());
  }
  if (!(from._internal_company_line_width() <= 0 && from._internal_company_line_width() >= 0)) {
    _internal_set_company_line_width(from._internal_company_line_width());
  }
  if (!(from._internal_company_radius() <= 0 && from._internal_company_radius() >= 0)) {
    _internal_set_company_radius(from._internal_company_radius());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenderSettings::CopyFrom(const RenderSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TCProto.RenderSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderSettings::IsInitialized() const {
  return true;
}

void RenderSettings::InternalSwap(RenderSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  palette_.InternalSwap(&other->palette_);
  layers_.InternalSwap(&other->layers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RenderSettings, company_radius_)
      + sizeof(RenderSettings::company_radius_)
      - PROTOBUF_FIELD_OFFSET(RenderSettings, underlayer_color_)>(
          reinterpret_cast<char*>(&underlayer_color_),
          reinterpret_cast<char*>(&other->underlayer_color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RenderSettings::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_map_5frenderer_2eproto_getter, &descriptor_table_map_5frenderer_2eproto_once,
      file_level_metadata_map_5frenderer_2eproto[0]);
}

// ===================================================================

class StopCoords::_Internal {
 public:
  static const ::SvgProto::Point& point(const StopCoords* msg);
};

const ::SvgProto::Point&
StopCoords::_Internal::point(const StopCoords* msg) {
  return *msg->point_;
}
void StopCoords::clear_point() {
  if (GetArenaForAllocation() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
StopCoords::StopCoords(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TCProto.StopCoords)
}
StopCoords::StopCoords(const StopCoords& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_point()) {
    point_ = new ::SvgProto::Point(*from.point_);
  } else {
    point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TCProto.StopCoords)
}

inline void StopCoords::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
point_ = nullptr;
}

StopCoords::~StopCoords() {
  // @@protoc_insertion_point(destructor:TCProto.StopCoords)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StopCoords::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete point_;
}

void StopCoords::ArenaDtor(void* object) {
  StopCoords* _this = reinterpret_cast< StopCoords* >(object);
  (void)_this;
}
void StopCoords::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopCoords::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopCoords::Clear() {
// @@protoc_insertion_point(message_clear_start:TCProto.StopCoords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopCoords::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TCProto.StopCoords.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SvgProto.Point point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopCoords::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TCProto.StopCoords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TCProto.StopCoords.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .SvgProto.Point point = 2;
  if (this->_internal_has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TCProto.StopCoords)
  return target;
}

size_t StopCoords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TCProto.StopCoords)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .SvgProto.Point point = 2;
  if (this->_internal_has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopCoords::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopCoords::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopCoords::GetClassData() const { return &_class_data_; }

void StopCoords::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StopCoords *>(to)->MergeFrom(
      static_cast<const StopCoords &>(from));
}


void StopCoords::MergeFrom(const StopCoords& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TCProto.StopCoords)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_point()) {
    _internal_mutable_point()->::SvgProto::Point::MergeFrom(from._internal_point());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopCoords::CopyFrom(const StopCoords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TCProto.StopCoords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopCoords::IsInitialized() const {
  return true;
}

void StopCoords::InternalSwap(StopCoords* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(point_, other->point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopCoords::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_map_5frenderer_2eproto_getter, &descriptor_table_map_5frenderer_2eproto_once,
      file_level_metadata_map_5frenderer_2eproto[1]);
}

// ===================================================================

class BusColor::_Internal {
 public:
  static const ::SvgProto::Color& color(const BusColor* msg);
};

const ::SvgProto::Color&
BusColor::_Internal::color(const BusColor* msg) {
  return *msg->color_;
}
void BusColor::clear_color() {
  if (GetArenaForAllocation() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
BusColor::BusColor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TCProto.BusColor)
}
BusColor::BusColor(const BusColor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_color()) {
    color_ = new ::SvgProto::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TCProto.BusColor)
}

inline void BusColor::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
color_ = nullptr;
}

BusColor::~BusColor() {
  // @@protoc_insertion_point(destructor:TCProto.BusColor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BusColor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete color_;
}

void BusColor::ArenaDtor(void* object) {
  BusColor* _this = reinterpret_cast< BusColor* >(object);
  (void)_this;
}
void BusColor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BusColor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BusColor::Clear() {
// @@protoc_insertion_point(message_clear_start:TCProto.BusColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusColor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TCProto.BusColor.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .SvgProto.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusColor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TCProto.BusColor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TCProto.BusColor.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .SvgProto.Color color = 2;
  if (this->_internal_has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TCProto.BusColor)
  return target;
}

size_t BusColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TCProto.BusColor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .SvgProto.Color color = 2;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BusColor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BusColor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BusColor::GetClassData() const { return &_class_data_; }

void BusColor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BusColor *>(to)->MergeFrom(
      static_cast<const BusColor &>(from));
}


void BusColor::MergeFrom(const BusColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TCProto.BusColor)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_color()) {
    _internal_mutable_color()->::SvgProto::Color::MergeFrom(from._internal_color());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BusColor::CopyFrom(const BusColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TCProto.BusColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusColor::IsInitialized() const {
  return true;
}

void BusColor::InternalSwap(BusColor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BusColor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_map_5frenderer_2eproto_getter, &descriptor_table_map_5frenderer_2eproto_once,
      file_level_metadata_map_5frenderer_2eproto[2]);
}

// ===================================================================

class MapRenderer::_Internal {
 public:
  static const ::TCProto::RenderSettings& render_settings(const MapRenderer* msg);
};

const ::TCProto::RenderSettings&
MapRenderer::_Internal::render_settings(const MapRenderer* msg) {
  return *msg->render_settings_;
}
void MapRenderer::clear_bus_descriptions() {
  bus_descriptions_.Clear();
}
MapRenderer::MapRenderer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stops_coords_(arena),
  bus_colors_(arena),
  bus_descriptions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TCProto.MapRenderer)
}
MapRenderer::MapRenderer(const MapRenderer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stops_coords_(from.stops_coords_),
      bus_colors_(from.bus_colors_),
      bus_descriptions_(from.bus_descriptions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_render_settings()) {
    render_settings_ = new ::TCProto::RenderSettings(*from.render_settings_);
  } else {
    render_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TCProto.MapRenderer)
}

inline void MapRenderer::SharedCtor() {
render_settings_ = nullptr;
}

MapRenderer::~MapRenderer() {
  // @@protoc_insertion_point(destructor:TCProto.MapRenderer)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MapRenderer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete render_settings_;
}

void MapRenderer::ArenaDtor(void* object) {
  MapRenderer* _this = reinterpret_cast< MapRenderer* >(object);
  (void)_this;
}
void MapRenderer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapRenderer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapRenderer::Clear() {
// @@protoc_insertion_point(message_clear_start:TCProto.MapRenderer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_coords_.Clear();
  bus_colors_.Clear();
  bus_descriptions_.Clear();
  if (GetArenaForAllocation() == nullptr && render_settings_ != nullptr) {
    delete render_settings_;
  }
  render_settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapRenderer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TCProto.RenderSettings render_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_render_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TCProto.StopCoords stops_coords = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops_coords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TCProto.BusColor bus_colors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bus_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TCProto.BusDescription bus_descriptions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bus_descriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapRenderer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TCProto.MapRenderer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TCProto.RenderSettings render_settings = 1;
  if (this->_internal_has_render_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::render_settings(this), target, stream);
  }

  // repeated .TCProto.StopCoords stops_coords = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stops_coords_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stops_coords(i), target, stream);
  }

  // repeated .TCProto.BusColor bus_colors = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bus_colors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_bus_colors(i), target, stream);
  }

  // repeated .TCProto.BusDescription bus_descriptions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bus_descriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_bus_descriptions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TCProto.MapRenderer)
  return target;
}

size_t MapRenderer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TCProto.MapRenderer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TCProto.StopCoords stops_coords = 2;
  total_size += 1UL * this->_internal_stops_coords_size();
  for (const auto& msg : this->stops_coords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TCProto.BusColor bus_colors = 3;
  total_size += 1UL * this->_internal_bus_colors_size();
  for (const auto& msg : this->bus_colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TCProto.BusDescription bus_descriptions = 4;
  total_size += 1UL * this->_internal_bus_descriptions_size();
  for (const auto& msg : this->bus_descriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .TCProto.RenderSettings render_settings = 1;
  if (this->_internal_has_render_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *render_settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapRenderer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapRenderer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapRenderer::GetClassData() const { return &_class_data_; }

void MapRenderer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MapRenderer *>(to)->MergeFrom(
      static_cast<const MapRenderer &>(from));
}


void MapRenderer::MergeFrom(const MapRenderer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TCProto.MapRenderer)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_coords_.MergeFrom(from.stops_coords_);
  bus_colors_.MergeFrom(from.bus_colors_);
  bus_descriptions_.MergeFrom(from.bus_descriptions_);
  if (from._internal_has_render_settings()) {
    _internal_mutable_render_settings()->::TCProto::RenderSettings::MergeFrom(from._internal_render_settings());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapRenderer::CopyFrom(const MapRenderer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TCProto.MapRenderer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRenderer::IsInitialized() const {
  return true;
}

void MapRenderer::InternalSwap(MapRenderer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stops_coords_.InternalSwap(&other->stops_coords_);
  bus_colors_.InternalSwap(&other->bus_colors_);
  bus_descriptions_.InternalSwap(&other->bus_descriptions_);
  swap(render_settings_, other->render_settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapRenderer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_map_5frenderer_2eproto_getter, &descriptor_table_map_5frenderer_2eproto_once,
      file_level_metadata_map_5frenderer_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TCProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TCProto::RenderSettings* Arena::CreateMaybeMessage< ::TCProto::RenderSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TCProto::RenderSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::TCProto::StopCoords* Arena::CreateMaybeMessage< ::TCProto::StopCoords >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TCProto::StopCoords >(arena);
}
template<> PROTOBUF_NOINLINE ::TCProto::BusColor* Arena::CreateMaybeMessage< ::TCProto::BusColor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TCProto::BusColor >(arena);
}
template<> PROTOBUF_NOINLINE ::TCProto::MapRenderer* Arena::CreateMaybeMessage< ::TCProto::MapRenderer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TCProto::MapRenderer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
